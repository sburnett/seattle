"""
<Program Name>
  key_daemon.repy

<Started>
  April 27, 2009

<Author>
  n2k8000@u.washington.edu
  Konstantin Pik

<Purpose>
  Provides a daemon that runs on a socket generating RSA keys of length 
  specified and store them in memory.  Upon connection, a public/private 
  keypair will be sent on that socket (either from cache or generated if 
  cache is empty).
  
  Manual connection to key_daemon should not be done, instead use
  key_daemon_parser.repy.
  
  Usage:
    key-daemon --port # [--maxkeys 60] [--keylength 1024] [--recvtimeout 240]
                        [--keyrefresh 5] [--ip #ip#]
   
  Paramaters (may be specified in any order):
    --port            Required. Sets the port the daemon will start on. No
                        default port is specified, program will terminate if
                        no port is not set.
    --maxkeys         Optional. Sets the default number of keys to generate
                        and store in cache [default is 60].
    --keylength       Optional. Sets the default keylength of all the keys
                        [default is 1024].
    --keyrefresh      Optional. Sets the time (in minutes) that the program 
                        will check to see if the cache needs to be refilled.
    --ip              Optional. Default uses getmyip().  Sets the IP that the 
                        daemon should initialize itself on (or try to).
    --recvtimeout     Optional. Default is 240 seconds (4 mins).  Sets how
                        much time (in seconds) the client has to send a 
                        request after connecting. The socket will be closed 
                        after this time.
    
  See key_daemon_parser.repy for how data is parsed.
"""

include rsa.repy
include argparse.repy


def fill_keys_cache():
  """
  <Purpose>
    Function checks to see if the number of keys in the cache is less than
    the number of keys the cache is supposed to have, and generates them 
    assert needed.  Function should never be called outside of key-daemon.
    
    key_cache layout:
     ((pubkey1, privkey1), ..., (pubkeyn, privkeyn))
     
  <Arguments>
    None.

  <Exceptions>
    None known.

  <Side Effects>
    Changes the global 'key_cache'.

  <Returns>
    None.
  """
  
  # Check to see if the # of keys we have in cache is less than
  # the number we're supposed to have.
  if len(mycontext['key_cache']) < mycontext['max_keys']:
    while len(mycontext['key_cache']) < mycontext['max_keys']:
      print 'Generating key '+str(1 + len(mycontext['key_cache']))+ \
        ' of '+str(mycontext['max_keys'])
      generated_key = rsa_gen_pubpriv_keys(mycontext['default_keylen'])
      pubkey_string = rsa_publickey_to_string(generated_key[0])
      privkey_string = rsa_privatekey_to_string(generated_key[1])
      mycontext['key_cache'].append((pubkey_string, privkey_string))

  # Reset timer to call this function again to check how full our cache is
  eventhandle = settimer(mycontext['key_refresh_rate'], fill_keys_cache, ())
  mycontext['fill_timer_handle'] = eventhandle
       
def close_socket(socket_to_close):
  """
  <Purpose>
    Function has a simple purpose - closes a socket. Used to close timed out
    sockets

  <Arguments>
    socket_to_close:   the socket-like object to close.

  <Exceptions>
    Catches possible exception thrown if socket is already closed.

  <Side Effects>
    Closes a presumably open socket.

  <Returns>
    None
  """
  try:
    socket_to_close.close()
  except Exception, e:
    print e

def wait_for_connection(ip, port, sockobj, thiscommhandle, listencommhandle):
  """
  <Purpose>
    Function is a callback for when a connection is established.  It sends 
    pub/priv keypair in string form to ip:port on sockobj.  a \n is
    concatenated at the end of each key to signify end of key.  The socket is
    closed after the key has been sent.
    
    A keypair will either be pulled from cache (if one exists at time of 
    connection request), or one will be generated and sent to the remote
    user.

  <Arguments>
    None. Shouldn't be called manually.

  <Exceptions>
    Throws an exception if socket breaks down in middle of send (perhaps 
    peer dropped?).  Expected behavior is to close socket and wait for 
    more connections.
    
    Throws IndexError exception when we try to .pop() on our cache if it is
    empty. Then we catch it and generate a new key on the fly.
    
    Function exits if the not remote client doesn't send a "NEWKEY\n" string 
    to request a new string as the first thing it does.
    
    Exception is caught if the recv() function times out waiting for a request
    string from the client.

  <Side Effects>
    Possibly modifies global 'key_cache'.

  <Returns>
    None
  """
  
  print '\n['+str(thiscommhandle)+'] remote user ['+str(ip)+'] connected'
  
  try:
    # timeout for how long to keep connection open until we get a request
    recv_timeout_handle = settimer(mycontext['recv_timeout'], close_socket, 
      (sockobj,))
    
    # initialize recv buffer
    in_data = ''
    
    # loop recv until we get a \n, otherwise will timeout (3 mins)
    while in_data.count('\n') < 1:
      in_data += sockobj.recv(512)
    
  except Exception, e:
    print e
    print '\n['+str(thiscommhandle)+'] remote user ['+str(ip)+'] is not'+ \
      ' responding, connection closed.'
    try: # close socket if not already closed
      sockobj.close()
    except Exception, e:
      print 'Closing socket ('+str(e)+')'
    return
    
  # cancel timer so that connection doesn't close unexpectedly.
  canceltimer(recv_timeout_handle)
  
  # we got some data, check if the string we're looking for.
  if in_data.strip(" ").lower() != "newkey\n":
    print '\n['+str(thiscommhandle)+'] provided invalid query string ("'+ \
      in_data.strip(" ")+'"). Closing connection from ['+str(ip)+'].'
    sockobj.close()
    return
  
  print '\n['+str(thiscommhandle)+'] remote user ['+str(ip)+'] requesting key'
  print '\n['+str(thiscommhandle)+'] trying cache for key...'
  
  # Try to .pop() our cache for a key, and if that errors out with an
  # IndexError then generate a new key. Finally try to send the keypair
  # back over the socket and close the connection after the transaction.
  try:
    key_tuple = mycontext['key_cache'].pop(0)
    pubkey_to_return = key_tuple[0]
    privkey_to_return = key_tuple[1]
  except IndexError, e: 
    print '\n['+str(thiscommhandle)+'] cache is empty, generating new key'
    key_tuple = rsa_gen_pubpriv_keys(mycontext['default_keylen'])
    pubkey_to_return = rsa_publickey_to_string(key_tuple[0])
    privkey_to_return = rsa_privatekey_to_string(key_tuple[1])
  finally:
    try:
      sockobj.send(pubkey_to_return+'\n'+privkey_to_return+'\n')
      print "\n["+str(thiscommhandle)+"] got a key"
    except Exception, e:
      print e
      print "\n["+str(thiscommhandle)+"] Error: trouble sending keys back " + \
        "to the remote host ("+str(ip)+")."
    finally:
      sockobj.close()

if callfunc == 'initialize':
  """
  <Purpose>
    Called when daemon is first started. Initializes the listening socket,
    and sets default settings (described at very top of this file).
    
  <Arguments>
    None.  All editable settings are passed as program parameters, see program
    description above.

  <Exceptions>
    Raises an exception if something goes wrong and we can't start our
    daemon.  Typically because of a restriction on a port.
    
    Exceptions will also be thrown if any of the parameters specified
    have invalid values.

  <Side Effects>
    None.

  <Returns>
    None.
  """
  
  print 'keydaemon initializing...'
  
  if len(callargs) > 9:
    print 'Error: Too many call arguments'
    exitall()
  
  # Check if arguments exist. If they do, the argparse_scan_* functions will return
  # some value that does not evaluate to False, and block will be executed.
  if argparse_scan_bool(callargs, '--port'):
    # Port exists, we verified that from the previous line
    port = argparse_scan_int(callargs, '--port')
    mycontext['key_cache'] = [] # initialize key_cache to blank list
    mycontext['max_keys'] = argparse_scan_int(callargs, '--maxkeys', 60)    
    # TODO: if keylength is of type string, it wont auto-cast to int, is this
    # desired behavior from rsa.repy?
    mycontext['default_keylen'] = int(argparse_scan_int(callargs, 
      '--keylength', 1024))
    
    
    mycontext['recv_timeout'] = int(argparse_scan_int(callargs, 
      '--recvtimeout', 240))
    # multiply by 60 seconds -> 60s per minute, arg takes in minutes
    mycontext['key_refresh_rate'] = 60 * argparse_scan_int(callargs, 
      '--keyrefresh', 5)
      
    # IP has default value of getmyip()
    ip = argparse_scan_str(callargs, '--ip', getmyip())
  else:
    print ('Error: No port set. Please specify a port with --port #')
    exitall()
    
  try:
    print 'Trying to start daemon on '+str(ip)+':'+str(port)
    listenhandle = waitforconn(ip, int(port), wait_for_connection)
    mycontext['listener_handle'] = listenhandle
    
    # Set timer to call call the function responsible for filling the cache
    eventhandle = settimer(mycontext['key_refresh_rate'], fill_keys_cache, ())
    mycontext['fill_timer_handle'] = eventhandle
  except Exception, e:
    print e
    print 'Error: Stopping daemon, most likely because of a port ' + \
      'restriction or improperly specified IP.'
    exitall()
  else:
    print '...daemon started successfully'
    fill_keys_cache()  