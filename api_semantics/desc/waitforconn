waitforconn(localip, localport, function)

  
summary:

  registers a listener on the given ip and port, the listener 
  will make tcp connections and call the callback function with
  arguments  =  
    (remoteip,remoteport,socketlikeobj,thiscommhandle,listencommhandle)
  returns a commhandle than can be used with stopcomm
  OR throws an excemption indicating that the listener was not resgistered


argument semantics:  (not currently tested)

  localip = a string, or TypeError
  localport = an int, or TypeError
  fucntion = a fucntion with correct call back arguments or Exception


behavioral semantics:

  1. waitforconn is called on an unsed port with a valid function
      a listener is registered 
      (tested- test_waitforconn_basic.py)

  2. waitforconn is called on a port being used by another waitforconn
      Exception 
      (tested - test_waitforcon_used_port_1.py)


  3. waitforconn is called on a port being used by a socket (openconn)
      Exception 
      (tested - test_waitforconn_used_port_2.py)  -  FAILS

  4. waitforconn is called with the same locaip and port as a socklkobj
      but after sock.close() is called
      no exception  
      (tested- test_waitfor_conn_after_sock.close.py - passes only because 
      previous test FAILS)

  5. waitforconn is called sucessfully, then a stopcomm is called on the
     "thiscommhandle" in the call back arguments
      the corresponding socketlikeobj is closed, the listener remains active
      (tested - test_waitfor_conn_stopcomm_thiscommhandle.py)

  6. waitforconn is called sucessfully, then a stopcomm is called
     the listener is stoped and further connections are not accepted
     (connections not made nor is callback function called), connections 
     allready being processed are not canceled
      (tested - test_waitforconn_stopcomm_1.py
       AND 
            - test_waitforconn_stopcomm_2.py , 
            tests when stopcomm is called in the call back function)

  7. waitforconn is called sucessfully, then a stopcomm is called, then an
      identical waitforconn is called
      no expcetion 
      (tested - test_waitforconn_after_stopcomm.py, ?Currently uses a
       3 second wait after the stopcomm to get the test to pass, is this
       a good time constrating / can we set any time constraint?,
       for now i consider this a FAIL)

  8.  waitforconn is called sucssfully, then a stopcomm is called, then a 
      waitforconn with the same ip and port but different call back funcition is
      called
       no expcetion, most recently specified call back function is regsitered 
       when a connection occurs.
       (tested -test_waitforconn_newcallback.py )



  9.  a connection is made to the waitforconn, and then another connection 
      is made  before the call back function has finished
      no expcetion, another event is used to call the callback function 
      again even if it is not done with the previous connection
      (tested - test_waitforconn_multievents.py)


 10.   more connections are made to a waitforconn than free events allow
       no exception occurs from the server side, but clients trying to connect
        will fail, this is perferable to allowing the conneciton but then not
        processing it
        (tested - test_waitforconn_max_events  FAILS)

 11.   all events are taken but an event becomes free.
         (tested - test_waitforconn_max_events
           TEST IS INVALID UNTIL TEST 10 is passing)
 