Deploy and Monitor Seattle Nodes on PlanetLab
---------------------------------

Seattle deploys on many environments, including PlanetLab.
This gives us an effective test environment for Seattle
nodes that have geographic distribution, but allow us to
SSH into them.   Since the testing on PlanetLab often 
is a beta or alpha version of Seattle, it may often be 
necessary to install and monitor Seattle on a large amount
of nodes at once. We can always install Seattle manually
on each individual nodes, however that is time consuming
and prone to mistakes. Thus we have several scripts that
help us install and monitor a large amount of Seattle nodes.

We have broken down this into single scripts that perform 
simple tasks and a python script that allows us to run the
bash scripts on a large amount of nodes in parallel. A 
prerequisite for running the scripts is, you must be able
to ssh into the node using public/privatekey.   THIS MEANS
YOU MOST LIKELY NEED TO RUN ssh-agent / ssh-add FIRST!!!

An example of running the script is:

$ python run_parallel_node_script.py NODE_LIST.txt parallel_bash_scripts/install_fresh_seattle.sh uw_seattle flibble


NOTE: THE SCRIPT WILL PRINT A HORRIBLE SET OF ERROR MESSAGES!   This
is normal.   The scripts print errors when failing to unpack 
tarballs due to trying both .tar.gz and .tgz file names.


This line will run the script install_fresh_seattle.sh on all the nodes
whose IP address is listed in NODE_LIST.txt. It uses the username
'uw_seattle' to log into the node and uses the seattle username 'flibble'
to download the Seattle installer.

The script run_parallel_node_script.py takes four arguments: a text file
with the IP addresses of all the nodes that you would like to run the bash
script on, a bash script that you would like to run on all the nodes, the
username to use to log into the node with, and a seattle username that is
used to download the Seattle installer from. Note that the fourth argument
may not be used for many of the bash scripts.



Bash Scripts for Deployment/Monitoring
---------------------------------------
active_nodes.sh - checks to see if nodemanager and softwareupdater are running.
already_installed_nodes.sh - Checks to see if Seattle has been installed on the node.
find_mem_cpu_usage.sh - Checks to see the amount of cpu and memory being used by softwaremanager and nodemanager.
free_pl_nodes.sh - Checks to see if this node is free for Seattle to be installed.
install_fresh_seattle.sh - Install a fresh copy of Seattle on this node.
pl_uptime.sh - Checks how long the node has been up.
start_crond.sh - Starts up the crond service on the node.
start_seattle_pl.sh - Starts up Seattle on the node.



Installing Seattle on Planetlab nodes.
--------------------------------------
To install on a large amount of nodes such as the planetlab system run the 
collowing scripts.

$ python run_parallel_node_script.py planetlab_nodes.txt parallel_bash_scripts/free_pl_nodes.sh poly_seattle flibble  
$ python run_parallel_node_script.py free_planetlab_nodes.txt parallel_bash_scripts/install_fresh_seattle.sh poly_seattle flibble
$ python run_parallel_node_script.py planetlab_nodes.txt parallel_bash_scripts/start_seattle_pl.sh poly_seattle flibble 
$ python run_parallel_node_script.py planetlab_nodes.txt parallel_bash_scripts/start_crond.sh poly_seattle flibble     


* planetlabl_nodes.txt should be a text file with the IP addresses of all the nodes
listed one per line.
* free_planetlab_nodes.txt will be a text file that is generated by the bash script free_pl_nodes.sh

To simplify things a simple bash script could be created with the four lines above.
