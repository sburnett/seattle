
from repyportability import *
include nmclient.repy

from django.contrib.auth.models import User as DjangoUser
from geni.control.models import User, VesselMap

from geni.control.resource_operations import acquire_resources, release_resources


def acquire_node(geni_user):
    #                                    user, num, type  
    success, blob = acquire_resources(geni_user, 1, 3)
    num, summary, explanation = blob
    if not success or not num == 1:
        print "Failed to acquire node."
        print "Summary:", summary
        print "Details:", explanation
        
        return

    else: 
        new_node = VesselMap.objects.filter(user = geni_user).order_by('expiration')
        print "Vessel obj:", new_node
        
        v_hostname = new_node[0].vessel_port.vessel.donation.ip
        v_port = int(new_node[0].vessel_port.port)
        v_name = new_node[0].vessel_port.vessel.name

        print "Successfully acquired node (" + str(new_node[0]) + ")"
        print "hostname", v_hostname
        print "port", v_port
        print "Vessel obj:", new_node

        nmhandle = nmclient_createhandle(v_hostname, v_port)
        filedata = nmclient_signedsay(nmhandle, "ListFilesInVessel", 
                                      privatekey = geni_user.privkey, 
                                      vesselid = v_name)
        print "files on vessel: ", filedata
        
        return nmhandle, v_name


def release_node(geni_user, nmhandle, v_name):
    ret = release_resources(geni_user, 0, True)
    # ret = release_vessel([vess])
    print ret
    
    # vessel should be released now, check
    
    sleep(10)

    try:
        filedata = nmclient_signedsay(nmhandle, "ListFilesInVessel", 
                                      privatekey = geni_user.privkey, 
                                      vesselid = v_name)
    except NMClientException:
        print "successfully unreachable"
    else:
        print "node still contactable"
        print "files on vessel: ", filedata

if __name__ == "__main__":
    user = DjangoUser.objects.get(username="test_geni")
    print "django user:", user
    
    geni_user = User.objects.get(www_user = user)
    print "geni user:", geni_user

    nmhandle, v_name = acquire_node(geni_user)
    release_node(nmhandle, v_name)
