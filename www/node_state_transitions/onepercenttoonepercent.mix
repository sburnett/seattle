""" 
Author: Justin Cappos

Module: Polling program for GENI.   It looks for donations, sets them up, and
        writes the new info in the database.   

Start date: October 18th, 2008


"""

include pollinglib.py
from django.db import transaction


def updatedb(nmhandle, node, retdict, *args):
  host, portstring = node.split(':')
  port = int(portstring)
  nodeID = rsa_publickey_to_string(retdict['nodekey'])
  
  dbnode = genidb.lookup_node(nodeID)
  if not dbnode:
    raise NodeError("Node "+node+" with ID '"+nodeID+"' does not have an entry in the database")

  genidb.update_node(dbnode, retdict, host, port, 'Ready')
  print time.ctime(), "updated node db record with version " + str(dbnode.version) + ", status " + str(dbnode.status)

  # hack to make changes reflect in the db  
  try:
    transaction.commit()
  except transaction.TransactionManagementError:
    pass

  return


def nodeerrorfun(node):
    print "nodeerrorfun called with node: ", node
    nodeip = node.split(":")[0]
    donations = genidb.lookup_donations_by_ip(nodeip)
    print "lookedup donations: ", donations
    for donation in donations:
      genidb.handle_inactive_donation(donation)
      
    # hack to make changes reflect in the db  
    try:
      transaction.commit()
    except transaction.TransactionManagementError:
      pass
      
    return

  
def main():

  # The format is: (startstate, endstate, function, args...)
  statefunctionargtuplelist = [(onepercent2publickey, onepercent2publickey, nodeerrorfun, updatedb)]

  # sleep for 10 seconds between each iteration of processing vessels
  locateandprocessvessels(statefunctionargtuplelist, 'onepercenttoonepercent', 10, acceptnewnode=False, parallelinstances=10)
  

if __name__ == '__main__':
  main()
