"""
<Author>
  Dr. Evil

<Start Date>
  January 23th, 2009

<Description>
  Viciously attacks a TCP connection.  Tries to disrupt it.

<Usage>
  Public Objects:
    EvilConnection - Tcp Socket.  Does evil things.

  Public Methods:
    EvilConnection(localip, localport) - get new socket
"""
class CorruptionSuccess(Exception):
  """This exception indicates the victim is disoriented"""

# Attacks another TCP connection
class EvilConnection:
  """
  <Purpose>
     Wraps up a evil socket.
  <Side Effects>
    None
  <Example Use>
    # Get an object
    evil_connection = EvilConnection()
    # Bind
    evil_connection.bind(getmyip(), 12345)
    # wait for a victim
    evil_connection.lurk()
    # trick a victim into a connection
    evil_connection.lure('123.4.5.6', 12345)
    # and disconnect
    evil_connection.disappear()
  """   

  ########### Public methods #######

  # Get object
  def __init__(self):
    self.conn = None
    (self.STATE_CLOSED, self.STATE_LURK, self.STATE_HIDE, \
     self.STATE_HACKING, self.STATE_SENDING, self.STATE_ACKED, \
     self.STATE_FIN_WAIT_2, self.STATE_CLOSING, self.STATE_CLOSE_WAIT, \
     self.STATE_LAST_ACK, self.STATE_TIME_WAIT) = range(0, 11)

    self.state = self.STATE_CLOSED
  
    self.RETRIES = 4
    self.TIMEOUT = .001

  def bind(self, localip, localport):
    # I am:
    self.localip = localip
    self.localport = localport

  # Steal messages
  def lurk(self):
    self.conn = recvmess(self.localip, self.localport, self.callback)

  # Trick into connection
  def lure(self, victimip, victimport):
    # Victim is,
    self.victimip = victimip
    self.victimport = victimport

    self.conn = recvmess(self.localip, self.localport, self.callback)

  def disappear(self):
    stopcomm(self.conn)

  # drop all incoming packets
  def hide(self):
     self.state = self.STATE_HIDE

  def send_empty_message(self):
     self.state = self.STATE_HACKING
     self.seq_num = 1
     mess = TcpPacket(self.localport, self.victimport, self.seq_num, 0, "PSH", 0, "")
     tries = self.RETRIES
     while tries:
       sendmess(self.victimip, self.victimport, mess.pack())
       tries -= 1
       sleep(self.TIMEOUT)

  ############# Private ###########

  def callback(self, ip, port, mess, ch):
    # print mess # DEBUG
    packet = unpack(mess)

    if(self.state == self.STATE_CLOSED): pass
    elif(self.state == self.STATE_LURK): pass
    elif(self.state == self.STATE_HIDE): 
      pass      # ignore
    elif(self.state == self.STATE_HACKING):
      raise CorruptionSuccess("victim sent response to hack!")
    elif(self.state == self.STATE_SENDING):
      self.state = self.STATE_ACKED
    elif(self.state == self.STATE_ACKED): 
      pass # ignore
    elif(self.state == self.STATE_FIN_WAIT_2): pass               
    elif(self.state == self.STATE_CLOSING): pass
    elif(self.state == self.STATE_CLOSE_WAIT): pass
    elif(self.state == self.STATE_LAST_ACK): pass       
    elif(self.state == self.STATE_TIME_WAIT): pass 
    else:
      raise UnknownStateError("undefined state")
