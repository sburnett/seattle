""" 
  <Source>
    RFC 793 -- TCP

  <State Diagram>

                                           Transmission Control Protocol
                                                Functional Specification

                              +---------+ ---------\      active OPEN  
                              |  CLOSED |            \    -----------  
                              +---------+<---------\   \   create TCB  
                                |     ^              \   \  snd SYN    
                   passive OPEN |     |   CLOSE        \   \           
                   ------------ |     | ----------       \   \         
                    create TCB  |     | delete TCB         \   \       
                                V     |                      \   \     
                              +---------+            CLOSE    |    \   
                              |  LISTEN |          ---------- |     |  
                              +---------+          delete TCB |     |  
                   rcv SYN      |     |     SEND              |     |  
                  -----------   |     |    -------            |     V  
 +---------+      snd SYN,ACK  /       \   snd SYN          +---------+
 |         |<-----------------           ------------------>|         |
 |   SYN   |                    rcv SYN                     |   SYN   |
 |   RCVD  |<-----------------------------------------------|   SENT  |
 |         |                    snd ACK                     |         |
 |         |------------------           -------------------|         |
 +---------+   rcv ACK of SYN  \       /  rcv SYN,ACK       +---------+
   |           --------------   |     |   -----------                  
   |                  x         |     |     snd ACK                    
   |                            V     V                                
   |  CLOSE                   +---------+                              
   | -------                  |  ESTAB  |                              
   | snd FIN                  +---------+                              
   |                   CLOSE    |     |    rcv FIN                     
   V                  -------   |     |    -------                     
 +---------+          snd FIN  /       \   snd ACK          +---------+
 |  FIN    |<-----------------           ------------------>|  CLOSE  |
 | WAIT-1  |------------------                              |   WAIT  |
 +---------+          rcv FIN  \                            +---------+
   | rcv ACK of FIN   -------   |                            CLOSE  |  
   | --------------   snd ACK   |                           ------- |  
   V        x                   V                           snd FIN V  
 +---------+                  +---------+                   +---------+
 |FINWAIT-2|                  | CLOSING |                   | LAST-ACK|
 +---------+                  +---------+                   +---------+
   |                rcv ACK of FIN |                 rcv ACK of FIN |  
   |  rcv FIN       -------------- |    Timeout=2MSL -------------- |  
   |  -------              x       V    ------------        x       V  
    \ snd ACK                 +---------+delete TCB         +---------+
     ------------------------>|TIME WAIT|------------------>| CLOSED  |
                              +---------+                   +---------+

                      TCP Connection State Diagram
                               Figure 6.
"""

include constants.repy
include errors.repy
include packet.repy 

# Keeps track of our connection state.
class TcpStateMachine:
  """
  <Purpose>
    The state machine organizes the changes in a relationship
    between a pair of connected parties.
    
  <Side Effects>
    Calls Repy's getlock().

  <Example Use>
    sm = TcpStateMachine()
    def callback(ip, port, mess, ch):
      packet = unpack(mess)
      sm.next(packet)
    recvmess(getmyip(), 12345, callback)

  """
  
  def __init__(self):
    """
    <Purpose>
      Initialize the state machine's variables. Sets state
      to be a closed connection.
    
    <Arguments>
      None
    
    <Exceptions>
      None
    
    <Side Effects>
      Creates a lock in self.lock.
      Creates a server and a client.
     
    <Returns>
      The new state machine object.
    """
    (self.STATE_CLOSED, self.STATE_LISTEN, self.STATE_SYN_SENT, \
     self.STATE_SYN_RCVD, self.STATE_ESTAB, self.STATE_FIN_WAIT_1, \
     self.STATE_FIN_WAIT_2, self.STATE_CLOSING, self.STATE_CLOSE_WAIT, \
     self.STATE_LAST_ACK, self.STATE_TIME_WAIT) = range(0, 11)

    # not initialized yet
    self.state = self.STATE_CLOSED

    # state changes must be atomic
    self.lock = getlock()

  # Callback for received packets
  def next(self, packet):
    """
    <Purpose>
      Handles all callbacks.  This function is the engine
      of a state machine.
    
    <Arguments>
      packet
          The packet
    
    <Exceptions>
      Raises UnknownStateError if it cannot handle the type of
      packet coming in.
    
    <Side Effects>
      Acquires the self.lock at the beginning and releases
      at end.

    <Returns>
      An opcode specifying the exact transition
      made.  Can be:
      (OP_RCV_REMOTE_SYN, OP_RCV_LOOPBACK_SYN,
       OP_RCV_SYNACK, OP_RCV_ACKSYN, OP_RCV_ACK,
       OP_RCV_PAYLOAD, OP_RCV_NONE)

    """
    advice = OP_RCV_NONE
    self.lock.acquire()       

    if(self.state == self.STATE_CLOSED): 
      pass # ignore

    elif(self.state == self.STATE_LISTEN):
      if packet.is_syn():
        self.state = self.STATE_SYN_RCVD
        advice = OP_RCV_REMOTE_SYN

    elif(self.state == self.STATE_SYN_SENT): 
      # finish the handshake with an ACK...
      if packet.is_synack():
        self.state = self.STATE_ESTAB
        advice = OP_RCV_SYNACK
      # loopback special case: recv own SYN!
      elif packet.is_syn():
        self.state = self.STATE_SYN_RCVD
        advice = OP_RCV_LOOPBACK_SYN
      else:
	pass # ignore

    elif(self.state == self.STATE_SYN_RCVD):
      # skip the ack then...
      if packet.is_payload():
        self.state = self.STATE_ESTAB
        advice = OP_RCV_PAYLOADSYN
      # ok ready
      elif packet.is_ack():
        self.state = self.STATE_ESTAB
	advice = OP_RCV_ACKSYN
      else:
	pass

    elif(self.state == self.STATE_ESTAB):
      # count packet or ignore old ack
      if packet.is_ack():
        advice = OP_RCV_ACK
      # Send back an ack or reack.
      elif packet.is_payload():
        advice = OP_RCV_PAYLOAD
      # old handshake?
      elif packet.is_syn():
        advice = OP_OLD_SYN
      elif packet.is_synack():
        advice = OP_OLD_SYNACK
      else:
        pass
    elif(self.state == self.STATE_FIN_WAIT_1): pass
    elif(self.state == self.STATE_FIN_WAIT_2): pass
    elif(self.state == self.STATE_CLOSING): pass
    elif(self.state == self.STATE_CLOSE_WAIT): pass
    elif(self.state == self.STATE_LAST_ACK): pass
    elif(self.state == self.STATE_TIME_WAIT): pass
    else: # garbled packet
      pass # ignore it

    self.lock.release()
    return advice

  def listen(self):
    """
    <Purpose>   
      Do any state changes to listen.

    <Arguments>
      None
          
    <Exceptions>
      AlreadyConnectedError if the state is not STATE_CLOSED
    
    <Side Effects>
      Uses lock.
      Sets the state to STATE_LISTEN.

    <Returns>
      A tuple of advice.
    """
    self.lock.acquire()
    if self.state != self.STATE_CLOSED:
      self.lock.release()
      raise AlreadyConnectedError("cannot listen because the connection is already in use")
    self.state = self.STATE_LISTEN 
    self.lock.release()

  def connect(self):
    """
    <Purpose>   
      Do any state changes to start connecting.

    <Arguments>
      None
          
    <Exceptions>
      AlreadyConnectedError if the connection is used
    
    <Side Effects>
      Uses lock.
      Changes state to STATE_SYN_SENT.     

    <Returns>
      A tuple of advice.
    """

    self.lock.acquire()
    if self.state != self.STATE_CLOSED:
      self.lock.release()
      raise AlreadyConnectedError("cannot connect because the connection is already in use")
    self.state = self.STATE_SYN_SENT
    self.lock.release()

  def accept(self):
    """
    <Purpose>   
      Do any state changes for a recv.

    <Arguments>
      None
          
    <Exceptions>
      NotRequestedError if not in STATE_SYN_RCVD from listen()
      returning.
    
    <Side Effects>
      Uses lock.
     
    <Returns>
      A tuple of advice.
    """
    self.lock.acquire()
    if self.state != self.STATE_SYN_RCVD:
      self.lock.release()
      raise NotRequestedError("cannot accept without a requested connection")
    self.lock.release()
    
  def send(self):
    """
    <Purpose>
      Do any state changes for a send.
    
    <Arguments>
      None
    
    <Exceptions>
      NotEstablished error if not in STATE_ESTAB.
    
    <Side Effects>
      Uses lock.
     
    <Returns>
      Tuple of advice.
    """
    self.lock.acquire()
    if self.state != self.STATE_ESTAB:
      self.lock.release()
      raise NotEstablishedError("must be established to send")
    self.lock.release()

  def recv(self):
    """
    <Purpose>
      Do any state changes for a recv.
    
    <Arguments>
      None
    
    <Exceptions>
      NotEstablished error if not in STATE_ESTAB.
    
    <Side Effects>
      Uses lock.
     
    <Returns>
      Tuple of advice.
    """
    self.lock.acquire()
    if self.state != self.STATE_ESTAB:
      self.lock.release()
      raise NotEstablishedError("must be established to recv")
    self.lock.release()

  def close(self):
    """
    <Purpose>
      Set the state to STATE_CLOSED
    
    <Arguments>
      None
    
    <Exceptions>
      None
    
    <Side Effects>
      None
     
    <Returns>
      Tuple of advice.
    """
    self.lock.acquire()
    self.state = self.STATE_CLOSED
    self.lock.release()
    
   
