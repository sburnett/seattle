"""
<Program Name>
  z_test_connection_listen.repy

<Started>
  February 9, 2009

<Author>
  Richard Jordan

<Purpose>
  To test that Connection.listen() function works.

  Passes quietly
"""
include connection.repy
include dummy_state_machine.repy
include test_packet_sender.repy

if callfunc == "initialize":
  IP = getmyip()
  PORT = 12345

def test_listen():
  conn = Connection()
  conn.state_machine.next = mynext
  conn.localip = IP
  conn.localport = PORT
  packet = TcpPacket(PORT, PORT, 0, 0, "SYN", 0, "test")
  settimer(0.01, conn.callback, (IP, PORT, packet.pack(), None))
  (ip, port) = conn.listen()
  assert conn.conn
  stopcomm(conn.conn)
  assert conn.server
  assert not conn.client
  assert conn.requestip
  assert conn.requestport
  assert not conn.remoteip
  assert not conn.remoteport
  assert conn.requestip == ip
  assert conn.requestport == port

def test_listen_timeout():
  conn = Connection()
  conn.localip = IP
  conn.localport = PORT
  try:
    conn.listen()
  except TimeoutError:
    pass
  else:
    raise Exception("should raise time out error")

def test_listen_not_bound():
  conn = Connection()
  try:
    conn.listen()
  except NotBoundError:
    pass
  else:
    raise Exception("should raise not bound error")

def test_listen_already_connected():
  conn = Connection()
  conn.localip = IP
  conn.localport = PORT
  conn.conn = True
  try:
    conn.listen()
  except AlreadyConnectedError:
    pass
  else:
    raise Exception("should raise already connected")

####################
# Test Helper Functions
####################

def mynext(*args):
  return OP_SND_SYNACK

def mypp(*args):
  return (IP, PORT)

def main():
  # setup
  
  # Run tests
  test_listen()
  test_listen_timeout()
  test_listen_not_bound()
  test_listen_already_connected()

  # teardown
  exitall()

if callfunc == 'initialize':
  main()
