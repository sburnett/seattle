"""
<Program Name>
  z_test_sends_final_ack.repy

<Started>
  February 7, 2009

<Author>
  Michael Moshofsky

<Purpose>
  To make sure the Ack is sent after a SYNACK is recieved
  while the Connection class is trying to connect.

  Raises exception when a Ack is not sent after a SYNAck
  is received.

"""



include tcp.repy


def listenForSYNAndACK(remoteIP, remoteport, message, commhandle):
  packet = unpack(message)
  if(is_synack(packet)):
    packetSYNAck = TcpPacket(remoteIP, mycontext['PORT'], 1, 0, "SYNACK", WINDOW_SIZE, "synacking...").pack()
    sendmess(remoteIP, mycontext['PORT'], packetSYNAck, IP, SECOND_PORT)
  elif(is_ack(packet)):
    mycontext['receivedACK'] = True



if callfunc == 'initialize':
  IP = '127.0.0.1' #  getmyip()
  mycontext['PORT'] = 12345
  SECOND_PORT = 12346

  mycontext['receivedACK'] = False

  socket = Connection()
  socket.bind(IP, mycontext['PORT'])

  recvmess(IP, SECOND_PORT, listenForSYNAndACK)

  socket.connect(IP, SECOND_PORT)

  sleep(DEFAULT_TIMEOUT * 3)

  if (mycontext['receivedACK'] != True):
      raise Exception("Ack was not sent after a SYNAck was recieved.")

  socket.disconnect()
  exitall()


