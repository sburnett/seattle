"""
This is the "Libc" of Repy. This file provides convenient and functional
wrappers around the Repy API to make programming more convenient.

It can either be loaded as a Repy module, or it can be imported directly.

"""
# This array holds things to export if we loaded as a module
_EXPORTS = []


##### Imports
#
# To minimize the complexity of this file,
# we import the sub-components of librepy using dylink rather
# than defining everything here.
#

# Import the sub-library, librepyrunloop
librunloop = dy_import_module("librepyrunloop")
_EXPORTS.append("librunloop")

# Import the sub-library, librepyfile
libfile = dy_import_module("librepyfile")
_EXPORTS.append("libfile")

# Import the sub-library, librepyrandom
librandom = dy_import_module("librepyrandom")
_EXPORTS.append("librandom")

##### Exports
#
# Here we export symbols from our sub-libraries

# Exports from librepyrunloop
PriorityQueue = librunloop.PriorityQueue
runAt = librunloop.runAt
runIn = librunloop.runIn
runEvery = librunloop.runEvery
stopSchedule = librunloop.stopSchedule
terminate_runloop = librunloop.terminate
_EXPORTS.append("PriorityQueue")
_EXPORTS.append("runAt")
_EXPORTS.append("runIn")
_EXPORTS.append("runEvery")
_EXPORTS.append("stopSchedule")
_EXPORTS.append("terminate_runloop")


# Exports from librepyfile
open = libfile.open
_EXPORTS.append("open")


# Exports from librandom
randomint = librandom.randomint
randomlong = librandom.randomlong
randomfloat = librandom.randomfloat
randomstring = librandom.randomstring
_EXPORTS.append("randomint")
_EXPORTS.append("randomlong")
_EXPORTS.append("randomfloat")
_EXPORTS.append("randomstring")


##### Run-time

# If we are loaded as a module, we need to dispatch the next module
if callfunc == "initialize":
  # Export everything
  for key in _EXPORTS:
    CHILD_CONTEXT[key] = _context[key]
  dy_dispatch_module()


