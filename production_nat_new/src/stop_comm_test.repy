include ShimStackInterface.repy
include session.repy

# customized parameters
clientcount = 5
extra_client = 5
random_client_ip = True


server = ShimStackInterface('(RSAShim)')
client = ShimStackInterface()
ip = 'burrito'
port = 12347
lock = getlock()

mycontext['clientcount'] = 0
mycontext['stopped'] = False

def server_func(rip, rport, sock, th, lh):
  print 'Communication starts for (%s:%s).' % (rip, rport)
  #print 'sock = %s' % sock

  lock.acquire()
  mycontext['clientcount'] += 1
  if mycontext['clientcount'] >= clientcount and (not mycontext['stopped']):
    print "GOING TO YELL STOP!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    stopped = server.stopcomm(lh)
    print "YELLED STOP = %s on stack = %s!!!!!!!!!!!!!!!!!!!!!!!!!!!!" % (stopped, server)
    mycontext['stopped'] = True
  lock.release()

  msg = ''
  printmsg = True
  while True:
    msg = session_recvmessage(sock)

    if printmsg:
      print msg
      printmsg = False

    if msg == 'end':
      break
    session_sendmessage(sock, msg)
    #print 'Received and confirmed msg: %s.' % msg

  print 'Communication stops for (%s:%s).' % (rip, rport)



def client_func():
  myid = str(int(randomfloat() * 100))

  try:
    if random_client_ip:
      (localip, localport) = (getRandomIP(), 12345)
    else:
      (localip, localport) = (None, None)
    sock = client.openconn(ip, port, localip, localport)
    #print "Client %s started with sock %s" % (myid, sock)
    print "Client %s started" % myid
  except Exception, e:
    print 'Unable to start #%s because "%s".' % (myid, e)
    return

  for i in range(30):
    msg = 'Client #%s [%d]' % (myid, i)
    try:
      session_sendmessage(sock, msg)
      if session_recvmessage(sock) != msg:
        print 'Wrong reply confirmation.'
        break
      else:
        #print 'Sent and confirmed msg: %s.' % msg
        pass
    except:
      print "Exceptions when sending message %d in Client #%s" % (i, myid)
      return

  session_sendmessage(sock, 'end')
  sock.close()
  print 'Client #%s done.' % myid
  

if callfunc == 'initialize':

  isserver = False
  try:
    isserver = (callargs[0] == 'server')
  except:
    pass

  if isserver:
    mycontext['handle'] = server.waitforconn(ip, port, server_func)
    print 'server registered at %s:%s.' % (ip, port)
  else:
    for i in range(clientcount + extra_client):
      settimer(0, client_func, [])
