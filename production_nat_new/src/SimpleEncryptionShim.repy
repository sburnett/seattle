 

class SimpleEncryptionShim(BaseShim):

  name = 'SimpleEncryptionShim'

  def __init__(self, next_shim=None, optional_args=None):
    BaseShim.__init__(self, next_shim, optional_args)
    self._ascii_shift = 1
    if optional_args:
      self._ascii_shift = int(optional_args[0])

  # override
  def copy(self):
    newshim = SimpleEncryptionShim(optional_args=[self._ascii_shift])
    return newshim

  # override
  def get_advertisement_string(self):
    return '(SimpleEncryptionShim,' + str(self._ascii_shift) + ')' + \
        self.shim_stack.get_advertisement_string()

  # Increases the ascii value of every character of the input string by
  # _ascii_shift.
  def _encrypt(self, string):
    cypher = ""
    for char in string:
      cypher += chr((ord(char) + self._ascii_shift) % 256)
    #print "ENCRYPT - %s - from '%s' to '%s'" % (self.name, string, cypher)
    return cypher

  # Does the reverse of _encrypt(), i.e. decreases the ascii values by
  # _ascii_shift.
  def _decrypt(self, cypher):
    string = ""
    for char in cypher:
      string += chr((ord(char) - self._ascii_shift) % 256)
    #print "DECRYPT - %s - from '%s' to '%s'" % (self.name, cypher, string)
    return string






  def _shim_socket_send(self, socket, msg):
    #print "'%s'._shim_socket_send: rawstr = %s" % (self.name, msg)
    return self.shim_stack.socket_send(socket, self._encrypt(msg))


  def _shim_socket_recv(self, socket, bytes): 
    rawstr = self.shim_stack.socket_recv(socket, bytes)
    #print "'%s'._shim_socket_recv: rawstr = %s" % (self.name, rawstr)
    return self._decrypt(rawstr)
  
  


