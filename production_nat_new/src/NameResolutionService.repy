include advertise.repy
include session.repy

def main():
  try:
    hostport = int(callargs[0])
  except Exception, err:
    print "Need to specify a port"
    return

  hostname = getmyip()
  mycontext['name_resolution_table'] = {}

  try:
    waitforconn(hostname, hostport, _client_request)
  except Exception, err:
    print "Unable to start listening because '%s'" % err
    return

  # Advertise my hostname and port so people can connect to me.
  _advertise_me(hostname, hostport)

def _log_this(logstr):
  if 'name_res_lock' not in mycontext:
    mycontext['name_res_lock'] = getlock()

  mycontext['name_res_lock'].acquire()
  logfile = open('name_res_service.log')
  logfile.write(str(logstr) + "\n")
  logfile.close()
  mycontext['name_res_lock'].release()



def _client_request(clienthost, clientport, socket, th, lh):
  table = mycontext['name_resolution_table']

  try:
    req_type = socket.recv(1)
    hostname = session_recvmessage(socket)
  except Exception, err:
    _log_this("Bad client request from %s:%s." % (clienthost, clientport))

  # Request type: Create a new entry 
  if req_type == 'C':
    pass

  # Request type: Lookup an entry
  elif req_type == 'L':

    # Look up in the local name resolution table
    if hostname in table.keys():
      retip = str(table[hostname])
    else:
      retip = ""

    # Return the corresponding IP
    try:
      session_sendmessage(socket, retip)
    except Exception, err:
      _log_this("Client %s:%s closed unexpectedly." % (clienthost, clientport))
    else:
      _log_this("Client %s:%s lookup: %s -> %s" % (clienthost, clientport,
                                                   hostname, retip))

  # Invalid request type
  else:
    _log_this("Client %s:%s initiated invalid request '%s'." % (clienthost, clientport, req_type))

def _advertise_me(myhost, myport):
  adv_key = "NameResolutionService"
  adv_value = "%s:%s" % (myhost, myport)
  print_adv_info = True

  while True:
    try:
      advertise_announce(adv_key, adv_value, 100)

    except Exception, err:
      _log_this("Unable to advertise because '%s'." % err)
      
      # Failed advertisement. We sleep a bit and re-try.
      sleep(10)

    else:
      # Print the advertised info once
      if print_adv_info:
        print "I'm listening on %s." % adv_value
        _log_this("Listening on %s." % adv_value)
        print_adv_info = False
      
      # Successful advertisement. We sleep longer before updating the
      # advertisement service.
      sleep(50)

if callfunc == 'initialize':
  main()
