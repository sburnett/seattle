
# A wrapper for listener handles with their corresponding shim stacks.
class RSABranchingShimHandle:
  def __init__(self, handle_stack_map):
    # A dict that maps handle to shim stack. We use the object's built-in hash
    # function, which calculates the hash value based on its memory address.
    self.handle_stack_map = handle_stack_map

  def get_map(self):
    return self.handle_stack_map

  def get_stack(self, handle):
    try:
      return self.handle_stack_map[handle]
    except KeyError:
      raise Exception('RSABranchShimHandle.getstack: invalid handle "%s"' % handle)



class RSABranchingShim(BaseShim):

  name = 'RSABranchingShim'

  def __init__(self, next_shim=None, optional_args=None):
    BaseShim.__init__(self, next_shim, optional_args)
    self._listen_handle = None



  def copy(self):
    mycopy = RSABranchingShim()
    return mycopy


  # The coordinator recognizes '[(ShimA)||(ShimB)]' as a branch statement and
  # will automatically expand it appropriately. The alternative port number is
  # enclosed in curly braces.
  def get_advertisement_string(self):
    return '(RSABranchingShim)[(RSAShim){' + \
        str(self._rsaport) + '}||]' + self.shim_stack.get_advertisement_string()

  
  # Server listener callback
  def _branch_waitforconn_cb_wrapper(self, rip, rport, sock, th, lh):
    # busy-waiting until handle is ready
    while not self._listen_handle:
      sleep(0.5)

    # rebuild stack below this shim
    shimstack = self._listen_handle.get_stack(lh)
    socketptr = sock
    while shimstack.top_shim is not None:
      socketptr._shim = shimstack.top_shim.copy()
      socketptr = socketptr._socket
      shimstack = shimstack.top_shim.shim_stack

    # Now that the socket contains a copy of the shim stack below, we can pass
    # the socket to the callback.
    self._branch_waitforconn_cb(rip, rport, sock, th, self._listen_handle)


  # Create two separate shim stacks. Return a wrapper of both handles when both
  # shim stacks return.
  def _shim_waitforconn(self, host, port, callback):

    # Build both shims
    noopstack = self.shim_stack.copy()
    rsastack = self.shim_stack.copy()
    rsastack.push(RSAShim())

    # Create callback wrapper so that the callback function receives our
    # customized listen handle
    self._branch_waitforconn_cb = callback

    # create handle
    noophandle = noopstack.waitforconn(host, port, self._branch_waitforconn_cb_wrapper)
    debugprint("Built noopstack: '%s'" % noopstack)
    self._rsaport = getFreePort()
    rsahandle = rsastack.waitforconn(host, self._rsaport, self._branch_waitforconn_cb_wrapper)
    debugprint("Built rsastack: '%s'" % rsastack)
    handle_stack_map = {noophandle: noopstack, rsahandle: rsastack}
    self._listen_handle = RSABranchingShimHandle(handle_stack_map)

    return self._listen_handle



  # Stop both listeners.
  def _shim_stopcomm(self, listen_handle):
    # check handle
    if not isinstance(listen_handle, RSABranchingShimHandle):
      # TODO Should return false here
      raise Exception('Incorrect listen_handle type.') 

    result = True
    for handle in listen_handle.get_map().keys():
      stack = listen_handle.get_map()[handle]
      ret = stack.stopcomm(handle)
      result = result and ret

    return result
    
 
    

  def _shim_openconn(self, host, port, localhost=None, localport=None, timeout=5):

    has_rsa = isinstance(self.shim_stack.top_shim, RSAShim)

    # TODO debug only. This determines whether this client uses the rsa shim
    # begin

    # if my local ip ends with an even number, then use rsa
    if localhost is None:
      raise Exception('Must specify local IP for debug')

    if int(localhost[len(localhost)-1]) % 2 == 0:
      debug_want_rsa = True
    else:
      debug_want_rsa = False

    if ((debug_want_rsa and (not has_rsa)) or 
        ((not debug_want_rsa) and has_rsa)):
      raise ShimExceptionStackRejected

    if debug_want_rsa:
      debugprint("openconn: Using RSA.")
    else:
      debugprint("openconn: NOT using RSA.")

    # end

    sock = self.shim_stack.openconn(host, port, localhost, localport, timeout)
    return sock


