"""

<Program Name>
  FECShim.repy

<Author>
  Justin Cappos

<Date Started>
  13 Jan 2011

<Purpose>
  A forward error correction shim.   This (will) replace a previous version
  that is buggy.

"""


FECContext = {}
FECContext['send_lock'] = getlock()
FECContext['recv_lock'] = getlock()
FECContext['sending_bundle_dictionary'] = {}
FECContext['received_bundle_dictionary'] = {}


# let's pick some random value and increment from there to prevent restarts
# of this shim from getting confused.
FECContext['nextbundleid'] = random_nbit_int(10)
FECContext['bundleid_lock'] = getlock()

# TODO: this should probably be a parameter set upon initialization
FECContext['packets_per_bundle'] = 2

# simple metrics
FECContext['datapacketcount'] = 0
FECContext['dupcount'] = 0
FECContext['xorcount'] = 0
FECContext['spuriousxorcount'] = 0
FECContext['insufficientxorcount'] = 0
FECContext['usefulxorcount'] = 0


# helper function to XOR two strings
def _str_xor_helper(a,b):
  if len(a) > len(b):
    (a,b) = (b,a)
  outstr = ''
  for pos in range(len(a)):
    outstr = outstr + chr( ord(a[pos]) ^ ord(b[pos]))
  outstr = outstr + b[pos+1:]
  return outstr


# helper function to build a string that is the XOR of a list of strings
def _xorstringlist(listofstrings):

  try:  
    returnedstring = listofstrings[0]
  
    for xorstring in listofstrings[1:]:
      returnedstring = _str_xor_helper(returnedstring, xorstring)
  except:
    #print listofstrings
    raise
  return returnedstring
      



# The basic idea is that I'm going to send a stream of packets to a destination
# every N packets I send to a destination will include an error correcting
# packet (using XOR).   
#
# We will assign each group of N packets a bundle ID to help track which XORs
# are within a packet.
#
# The packets sent will be numbered 0, 1, ..., N-1, N
# the packets 0 - N-1 are the original packet, and the packet N is the XOR
# of all of the previous packets in this bundle
#
# The XOR packet has an additional header containing a list of the packet
# lengths so that it can reconstruct the original packet.
#
# The sender will keep a dictionary of destination information -> {'bundleid':
# bundleid, 'packetlist':[packetbody1, ...]}
# 
# The receiver will have a dictionary of source information ->
# a dictionary that maps bundle id -> a dictionary packetid -> 
# previouspacket


# TODO: Expire bundles from the received bundle dictionary


include random.repy

class FECShim(BaseShim):

  name = 'FECShim'

  # Return the next available bundleid without a race...
  def _get_new_bundleid(self):
    FECContext['bundleid_lock'].acquire()
    
    thisbundleid = FECContext['nextbundleid']
    FECContext['nextbundleid'] = FECContext['nextbundleid'] + 1

    FECContext['bundleid_lock'].release()
    
    return thisbundleid

  def __init__(self, next_shim=None, optional_args=None):
    BaseShim.__init__(self, next_shim, optional_args)
    self._logger = ShimLogger('FECShim')
    
    self.prev_callback = None



  def copy(self):
    return FECShim()


  def get_advertisement_string(self):
    return '(FECShim)' + self.shim_stack.get_advertisement_string()



  def _shim_recvmess(self,host,port,callback):
    self.prev_callback = callback
    handle = self.shim_stack.recvmess(host,port,self.fec_callback)
    return ('FEC',handle)



  # This is called whenever a packet arrives
  def fec_callback(self,srchostname,srcport,packetstring,handle):
    # collect packets, recovering lost ones if possible

    # NOTE: I don't want to use the srcport because it may vary.   
    #srcinfo = srchostname+':'+str(srcport)
    srcinfo = srchostname
      
    # These calls might raise an exception if there is bad / corrupted data...
    (bundleidstr, packetidstr, packetbody) = packetstring.split(':',2)
   
    packetnum = int(packetidstr)

    bundleid = int(bundleidstr)
    
    if packetnum < 0 or packetnum > FECContext['packets_per_bundle']:
      raise Exception('Bad packetnum in FECShim: '+packetnumstring)    

    # grab a lock to prevent concurrent access to shared state
    FECContext['recv_lock'].acquire()

    # NOTE: I want to only trigger the callback after the lock is released.   
    # To achieve this, I'll set a flag indicating whether or not to call
    # the callback in the finally clause after releasing the lock.
    execute_callback = False
    args_to_callback = []

    # be sure to release this...
    try:

      # Okay, we're going to look into the received_bundle_dict to decide what
      # to do.

      if srcinfo not in FECContext['received_bundle_dictionary']:
        # if missing this, add an empty entry...
        FECContext['received_bundle_dictionary'][srcinfo] = {}

      if bundleid not in FECContext['received_bundle_dictionary'][srcinfo]:
        # if missing this, add an empty list of packet info
        FECContext['received_bundle_dictionary'][srcinfo][bundleid] = {}

      # Okay, I have initialized the structure, is this a dup?
      if packetnum in FECContext['received_bundle_dictionary'][srcinfo][bundleid]:
        # this looks like a DUP!
        # let's check the contents are the same
        if packetbody != FECContext['received_bundle_dictionary'][srcinfo][bundleid][packetnum]:
          raise Exception('Received a DUP that has different contents!!!')
        FECContext['dupcount'] = FECContext['dupcount'] + 1
        return

      # not a duplicate, let's add it.
      FECContext['received_bundle_dictionary'][srcinfo][bundleid][packetnum] = packetbody

      # if it's not an XOR packet, call the next level and continue
      if packetnum != FECContext['packets_per_bundle']:
        FECContext['datapacketcount'] = FECContext['datapacketcount'] + 1
        
        # this will trigger the callback before returning...
        execute_callback = True
        args_to_callback = (srchostname,srcport,packetbody,handle)
        
        return

      # got an XOR packet...
      FECContext['xorcount'] = FECContext['xorcount'] + 1


      # is it spurious? (we got all data packets, so no need)
      if len(FECContext['received_bundle_dictionary'][srcinfo][bundleid]) > FECContext['packets_per_bundle']:
        FECContext['spuriousxorcount'] = FECContext['spuriousxorcount'] + 1
        return

      # did we get too few packets to reconstruct the missing ones?
      if len(FECContext['received_bundle_dictionary'][srcinfo][bundleid]) < FECContext['packets_per_bundle']:
        FECContext['insufficientxorcount'] = FECContext['insufficientxorcount'] + 1
        return
 
      # cool!   This is useful, let's reconstruct it and deliver!
      FECContext['usefulxorcount'] = FECContext['usefulxorcount'] + 1


      # strip off the length of packets list so that we know whether to 
      # truncate
      lengthheader, packetbody = packetbody.split(':',1)

      packetlengthstrlist = lengthheader.split(',')

      # let's take the previous data packets and add this packet body.
      packetbodies_to_xor = FECContext['received_bundle_dictionary'][srcinfo][bundleid].values()[:-1] + [packetbody]

      recovered_packetbody_with_extra_junk = _xorstringlist(packetbodies_to_xor)
 
      # I should put this in the dict so that if the packet 
      # arrives late, we don't deliver a duplicate

      # first figure out which message is missing...
      currentpacketnumset = set(FECContext['received_bundle_dictionary'][srcinfo][bundleid])
      allpossiblepacketnumset = set(range(FECContext['packets_per_bundle']))

      missingmessageset = allpossiblepacketnumset.difference(currentpacketnumset)
      # should only be one missing...
      assert(len(missingmessageset) == 1)
      missingpacketnum = missingmessageset.pop()
 
      
      # truncate the packet (if needed).   This is important if the packets
      # in the bundle are different sizes
      recovered_packetbody = recovered_packetbody_with_extra_junk[:int(packetlengthstrlist[missingpacketnum])]

      # (also check that the extra junk is all 0s)
      extrajunk = recovered_packetbody_with_extra_junk[int(packetlengthstrlist[missingpacketnum]):]
      assert(extrajunk == '\x00'*len(extrajunk))
      
      # then add it to prevent delivery of the original data packet...
      FECContext['received_bundle_dictionary'][srcinfo][bundleid][missingpacketnum] = recovered_packetbody

      # this will trigger the callback before returning...
      execute_callback = True
      args_to_callback = (srchostname,srcport,recovered_packetbody,handle)
      
      return
 
    finally:
      # always release the lock
      FECContext['recv_lock'].release()
      
      # if needed, call this *after* releasing the lock
      if execute_callback:
        self.prev_callback(*args_to_callback)

      
      

  def _shim_sendmess(self,desthost,destport,packetbody,localhost=None,localport=None):
    # send an error correcting packet every N packets
    # the packages to a server to be re-assembeled

    destinfo = desthost+':'+str(destport)
    
    FECContext['send_lock'].acquire()
    
    # always release the lock later...
    try:
      
      # add a blank entry if there isn't already a bundle.  
      if destinfo not in FECContext['sending_bundle_dictionary']:
        FECContext['sending_bundle_dictionary'][destinfo] = {}
        FECContext['sending_bundle_dictionary'][destinfo]['bundleid'] =self._get_new_bundleid()
        FECContext['sending_bundle_dictionary'][destinfo]['packetlist'] = []

      # Get information about this packet
      packetnum = len(FECContext['sending_bundle_dictionary'][destinfo]['packetlist'])
      bundleid = FECContext['sending_bundle_dictionary'][destinfo]['bundleid']

      # add the header
      newpacketdata = str(bundleid)+":"+str(packetnum)+":"+packetbody

      # ... and send it out...
      self.shim_stack.sendmess(desthost,destport,newpacketdata,localhost,localport)

      
      # let's add this packet to the list...
      FECContext['sending_bundle_dictionary'][destinfo]['packetlist'].append(packetbody)

      # if more are needed before sending an XOR packet, then return
      if len(FECContext['sending_bundle_dictionary'][destinfo]['packetlist']) < FECContext['packets_per_bundle']:
        # BUG: I'm just assuming the whole thing was sent!
        return len(packetbody)

      # otherwise, let's send the XOR packet ...

      xorpacketbody = _xorstringlist(FECContext['sending_bundle_dictionary'][destinfo]['packetlist'])

      # make the XOR packet contain the length of the other packets
      xorlengthlist = []
      for packetbody in FECContext['sending_bundle_dictionary'][destinfo]['packetlist']:
        xorlengthlist.append(str(len(packetbody)))

      lengthheader = ','.join(xorlengthlist)
 
      # create the complete xor packet,...
      xorpacketdata = str(bundleid)+":"+str(packetnum+1)+":"+lengthheader+":"+xorpacketbody

      # ... and send it out...
      self.shim_stack.sendmess(desthost,destport,xorpacketdata,localhost,localport)

      # now, let's delete the sent data for this bundle since it's no longer 
      # needed.
      del FECContext['sending_bundle_dictionary'][destinfo]
      
      # BUG: I'm just assuming the whole thing was sent!
      return len(packetbody)
    


    finally:
      FECContext['send_lock'].release()



    
  def stopcomm(self,handle):
    try:
      (name,handle) = handle
      if name != 'FEC':  raise Excetpion('Bad name'+str(name))
    except Exception, e:
      raise Exception('Bad handle in FECShim: '+str(e))
    else:
      # remove all state
      self.recv_dict = None
      self.shim_stack.stopcomm(handle)

