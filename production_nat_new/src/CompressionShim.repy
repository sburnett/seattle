"""
Compression and decompression shim for both TCP and UDP.

Written by: Danny Y. Huang (yh1@williams.edu)

"""
import zlib

# How many bytes should we receive every time we call socket.recv
RECV_BUFFER_SIZE = 2048

class CompressionShim(BaseShim):

  def __init__(self, next_shim=None, optional_args=None):

    BaseShim.__init__(self, next_shim, optional_args)
    self._logger = ShimLogger('CompressionShim')

    # A dictionary that maps a socket to its receive buffer, a string which
    # temporarily holds received TCP stream that has been decompressed.
    self._recv_buffer_dict = {}

    # Lock to guard the receive stream queue
    self._recv_lock = getlock()
    
    # The extra byte read when we called _get_next_chunk() the previous
    # time. See the _get_next_chunk() method for why we need to read one extra
    # byte.
    self._recv_previous_extra_byte_dict = {}


  # ..................................................
  # TCP
  # ..................................................


  def _shim_socket_send(self, socket, long_chunk):
    """
    Compresses the original chunk and sends it in its entirety, guaranteed. The
    compressed chunk is prepended with with its length and a comma.

    """
    # Compress the entire message
    short_chunk = zlib.compress(long_chunk)

    # Prepend a header to the short chunk
    short_chunk = str(len(short_chunk)) + ',' + short_chunk

    # Send the entire short chunk
    while short_chunk:
      sent_length = self.shim_stack.socket_send(socket, short_chunk)
      short_chunk = short_chunk[sent_length : ]

    return len(long_chunk)
                                       


  def _get_next_chunk(self, socket):
    """
    Helper method for _shim_socket_recv. Receives as much as possible until
    encountering the first comma. The value before the comma is the length we
    should read next. We then read the subsequent chunk of the given
    length. Finally, we decompress the chunk and returrn it as a string.

    """
    # Read until the first comma to obtain chunk length
    chunk_length = ''
    while True:
      char = self.shim_stack.socket_recv(socket, 1)
      if char == ',':
        break
      else:
        chunk_length += char

    # Integrity check
    try:
      remaining_bytes = int(chunk_length)
    except ValueError, err:
      raise Exception('CompressionShim: Bad chunk length "%s".' % chunk_length)

    # Read the entire chunk
    chunk = ""
    while remaining_bytes > 0:
      data = self.shim_stack.socket_recv(socket, remaining_bytes)
      chunk += data
      remaining_bytes = remaining_bytes - len(data)

    # Decompress chunk and return it
    return zlib.decompress(chunk)



  def _shim_socket_recv(self, socket, bytes): 
    """ 
    Reads the next trunk and sticks it into the receive buffer. Return at most
    the requested number of bytes from the receive buffer.

    """
    try:
      self._recv_lock.acquire()

      # Initialize the receive buffer if not already done so.
      if str(socket) not in self._recv_buffer_dict:
        self._recv_buffer_dict[str(socket)] = ''
      recv_buf = self._recv_buffer_dict[str(socket)]

      # Read the next chunk from network if the receive buffer is empty
      if len(recv_buf) == 0:
        recv_buf = self._get_next_chunk(socket)

      # Return up to bytes from the receive buffer
      ret_msg = recv_buf[0:bytes]
      self._recv_buffer_dict[str(socket)] = recv_buf[len(ret_msg) : ]

      return ret_msg

    finally:
      self._recv_lock.release()



  def copy(self):
    return CompressionShim()


  def get_advertisement_string(self):
    return '(CompressionShim)' + self.shim_stack.get_advertisement_string()







  # ..................................................
  # UDP
  # ..................................................

  def sendmess(self,host,port,longmsg,localhost=None,localport=None):
    shortmsg = zlib.compress(longmsg, 9)
    shortlength = self.shim_stack.sendmess(host,port,shortmsg,localhost,localport)

    if shortlength == len(shortmsg):
      return len(longmsg)
    else:
      return 0


  def recvmess(self,host,port,callback):

    # Inline closure to avoid race conditions
    def recvmess_callback(rip,rport,longmsg,handle):
      try:
        shortmsg = zlib.decompress(longmsg)

      except zlib.error, err:
        # Unable to decompress. Bad packet. We drop it.
        return

      callback(rip, rport, shortmsg, handle)

    return self.shim_stack.recvmess(host, port, recvmess_callback)

