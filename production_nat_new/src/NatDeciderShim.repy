"""

<Program Name>
  NatDeciderShim.repy

<Author>
 Danny Yuxing Huang (yh1@williams.edu)

<Purpose> 

  Decider shim for the Nat Forwarding Shim. When run in a server, it determines
  if the server is behind a NAT. If it is, then the decider pushes the
  NatForwardingShim onto the shim stack. This shim is not advertised.

"""

include NatForwardingLib.repy

class NatDeciderShim(BaseShim):
  
  # TODO Retained for debug
  name = 'NatDeciderShim'

  def __init__(self, next_shim=None, optional_args=None):
    BaseShim.__init__(self, next_shim, optional_args)
    self._logger = ShimLogger('NatDeciderShim')


  def copy(self):
    return NatDeciderShim()


  # This shim is not advertised.
  def get_advertisement_string(self):
    return self.shim_stack.get_advertisement_string()




  def waitforconn(self, host, port, callback):
    self._logger.log("waitforconn: Check if we're behind NAT")
    # If server is behind the NAT, then behind_nat = True.
    behind_nat = natforwardinglib_isBidirectional(getmyip(), port)

    if behind_nat:
      self.shim_stack.push(NatBranchingShim())
      self._logger.log("waitforconn: We are behind NAT.")

    return self.shim_stack.waitforconn(host, port, callback)
  

