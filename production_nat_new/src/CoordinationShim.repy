#include local_lookup_methods.repy
include advertise.repy


# TODO For TCP-based connections only. Coordinating for UDP won't be that hard
# once this is done.
class CoordinationShim(BaseShim):

  name = 'CoordinationShim'

  # We will do a lookup on the DHT for at most the following number of times.
  _lookup_attempts = 4

  # Number of seconds to re-advertise the shim stack to refresh DHT
  _advertise_wait_interval = 60

  # Override
  def copy(self):
    return CoordinationShim()

  def __init__(self, next_shim=None, optional_args=None):
    BaseShim.__init__(self, next_shim, optional_args)

  # Also advertises the IP of the server
  def get_advertisement_string(self):
    return '(CoordinationShim,' + self._server_ip + ')' + self.shim_stack.get_advertisement_string()


  # ===========================================================================
  # SERVER METHODS
  # ===========================================================================

  def _shim_listener_callback(self, remoteip, remoteport, socket, thiscommhandle, listencommhandle):
    print "zzzz CoordinationShim[%d] CB" % self.getid()
    return (remoteip, remoteport, socket, thiscommhandle, listencommhandle)



  def _shim_waitforconn(self, hostkey, port, callback):

    # Traverse through the stack and build the general stack, which is shared
    # for all incoming connections.
    handle = self.shim_stack.waitforconn(hostkey, port, callback)

    self._server_ip = getmyip()

    # Now that the stack has been built, we can advertise its content.
    advertise_key = str(hostkey) + "," + str(port) + ",TCP"
    advertise_value = self.shim_stack.get_advertisement_string()

    # Prepend my IP to the advertised shim stack string
    try:
      serverip = get_ip_from_hostkey(hostkey)
    except NameTranslationError, error:
      # An exception here implies that we never reached the bottom of the shim
      # stack where the system's waitforconn was invoked. In this case, we don't
      # need to prepend the IP to the shim stack string since the IP is not
      # actually meaningful.
      pass
    else:
      advertise_value = serverip + '@' + advertise_value
    
    # We advertise the contents of the shim stack at its first creation.
    # Subsequent changes are on a per-connection basis (using negotiation) and
    # are irrelevant for coordination.
    self._listener_active = True
    settimer(0, self._advertise_thread, [advertise_key, advertise_value])

    return handle


  def _advertise_thread(self, advertise_key, advertise_value):
    while self._listener_active:
      try:
        advertise_announce(advertise_key, advertise_value, 120)
      except Exception, e:
        # Silently drops all errors because the advertisement service can be
        # flaky at times
        pass

      sleep(self._advertise_wait_interval)






  # ===========================================================================
  # NON-SERVER METHODS
  # ===========================================================================


  # Uses a lookup service to coordinate the construction of the client shim
  # stack. Returns a list of available shim stack string representations. If
  # use_cache is set to True, then we are only doing a lookup on a local
  # cache. Otherwise, we will do a lookup remotely. Helper for the openconn
  # operation.
  def _get_shimstack_strings(self, hostkey, port, use_cache=True):
    # Initializes the local cache so we don't have to contact the remote
    # services all the time.
    if mycontext.has_key('shim_stack_string_cache_lock'):
      mycontext['shim_stack_string_cache_lock'].acquire()
    else:
      mycontext['shim_stack_string_cache_lock'] = getlock() 
      mycontext['shim_stack_string_cache_lock'].acquire()
      mycontext['shim_stack_string_cache'] = {}

    lookup_results = []
    lookup_key = str(hostkey)+','+str(port)+',TCP'
    local_lookup_cache = mycontext['shim_stack_string_cache']

    # Search the cache if use_cache is True. If cache returns empty, use the
    # remote lookup service.
    if use_cache and local_lookup_cache.has_key(lookup_key):
      lookup_results = local_lookup_cache[lookup_key][:]
      if lookup_results:
        mycontext['shim_stack_string_cache_lock'].release()
        return lookup_results

    # Contact the remote lookup service
    for count in range(self._lookup_attempts):
      lookup_results = advertise_lookup(lookup_key)
      if len(lookup_results) > 0:
        break
      sleep(1)

    # Add to local cache.
    if local_lookup_cache.has_key(lookup_key):
      local_lookup_cache[lookup_key] += lookup_results
    else:
      local_lookup_cache[lookup_key] = lookup_results

    # Remove duplicates or else we would be trying the same non-working shim
    # stacks multiple times.
    self._remove_duplicates(local_lookup_cache[lookup_key])

    # Return a copy so that others won't be able to mess with our internal
    # cache.
    lookup_results = local_lookup_cache[lookup_key][:]

    mycontext['shim_stack_string_cache_lock'].release()

    return lookup_results


  def _shim_openconn(self, hostkey, port, localhost=None, localport=None, timeout=5):

    exception_str = ''
    sock = None

    # TODO Get all shims in the current stack (below the coordintor), including those
    # marked as do_not_advertise. We want to preserve the original shim stack,
    # and adding new ones to the bottom. 
    existing_shim_stack = "" # TODO

    # Indicates whether we have tried using the remote lookup services
    # (e.g. DHT) to locate the shim stack strings of the server.
    tried_using_remote_lookup = False

    # First, obtain the shim stack string from cache, or if not, from the DHT.
    shimstackstr_list = self._get_shimstack_strings(hostkey, port)

    # Try to do openconn for every possible shim stack string
    while len(shimstackstr_list) > 0:

      shimstackstr = shimstackstr_list.pop()
      port_num = port

      # Extract the port number if the stack string contains "{port_num}"
      left_curly_braces = shimstackstr.find('{')
      right_curly_braces = shimstackstr.find('}')
      if right_curly_braces > left_curly_braces > 0:
        port_num = int(shimstackstr[left_curly_braces+1 : right_curly_braces])
        shimstackstr = shimstackstr[:left_curly_braces]+shimstackstr[right_curly_braces+1:]

      # Extract the IP address associated with this stack
      if is_ip_address(hostkey):
        hostip = hostkey
      else:
        try: 
          (hostip, shimstackstr) = shimstackstr.split('@')
          set_ip_to_hostkey(hostkey, hostip, tolock=False)
        except ValueError:
          # Looks like the server has not advertised its IP address. Fine. We'll
          # just trust that whatever shims below may somehow translate the
          # hostkey. It is probable that the hostkey needs no translation at
          # all. 
          hostip = hostkey

      # Append the new shims to the back of the existing stack
      shim_stack = ShimStack(existing_shim_stack + shimstackstr)

      try:
        sock = shim_stack.openconn(hostkey,port_num,localhost,localport,timeout)
      except Exception,e:
        exception_str +=' Exception: '+str(e)+' for stack '+shimstackstr
      else:
        # Success in openconn. We won't try the rest of the shimstack strings.
        break



      if len(shimstackstr_list) == 0 and not tried_using_remote_lookup:
        # All possible shim stack strings are consumed and we still haven't
        # found a workable one. We want to lookup the shim stack strings using
        # the remote services, instead of the local cache.
        shimstackstr_list = self._get_shimstack_strings(hostkey, port, use_cache=False)
        tried_using_remote_lookup = True

      if len(shimstackstr_list) == 0 and tried_using_remote_lookup:      
        # All possible shim stack strings are consumed. We haven't found a
        # workable one after lookups on both the local cache and the remote
        # services. We raise our arms and shall surrender.
        break

    # end while

    # If all things fail, we will connect without the shim interface. This
    # provides backward compatibility for older servers.
    if sock is None:
      print "DEBUG: Trying to connect without using the shim interface."
      try:
        sock = openconn(hostkey,port_num,localhost,localport,timeout)
      except Exception,e:
        exception_str +=' Unable to connect without using shims.'

    # At this point, we've exhausted all our means.
    if sock is None:
      exception_str = 'CoordinationShim error: ' + exception_str
      raise Exception(exception_str)
    else:
      self.shim_stack = shim_stack
      return sock





  def _shim_stopcomm(self, handle):
    self._listener_active = False
    return self.shim_stack.stopcomm(handle)


  # Remove the duplicates in the input list. The input list is modified. Helper
  # method for self._get_shimstack_strings.
  def _remove_duplicates(self, inlist):
    listindex = 0

    while listindex < len(inlist):
      # If the current item appears in the rest of the list, remove it.
      currentitem = inlist[listindex]
      if currentitem in inlist[listindex+1:]:
        del inlist[listindex]
      else:
        listindex += 1

