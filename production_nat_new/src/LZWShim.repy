"""
Compression shim that implements the LZW algorithm.

Written by: Danny Yuxing Huang (yh1@williams.edu)

LZW Algorithm adapted from: http://bjourne.blogspot.com/2007/11/example-of-lzw-algorithm.html

Base 36 conversion: http://en.wikipedia.org/wiki/Base_36#Python_Conversion_Code

"""

class LZWShim(BaseShim):

  def __init__(self, next_shim=None, optional_args=None):
    BaseShim.__init__(self, next_shim, optional_args)
    self._logger = ShimLogger('LZWShim')
  
    # The initial LZW tables that maps codes to strings and vice-versa.
    self._code_to_str = [chr(i) for i in range(256)]
    self._str_to_code = {}
    for i in range(256):
      self._str_to_code[chr(i)] = i

  def sendmess(self,host,port,longmsg,localhost=None,localport=None):
    shortmsg = self._compress(longmsg)
    shortlength = self.shim_stack.sendmess(host,port,shortmsg,localhost,localport)

    if shortlength == len(shortmsg):
      return len(longmsg)
    else:
      return 0


  def recvmess(self,host,port,callback):
    self._prev_callback = callback
    return self.shim_stack.recvmess(host,port,self._recvmess_callback)


  def _recvmess_callback(self,rip,rport,longmsg,handle):
    shortmsg = self._decompress(longmsg)
    self._prev_callback(rip, rport, shortmsg, handle)



  # .........................................................................
  # HELPER METHODS BELOW
  # .........................................................................

  def _compress(self, longstr):
    """
    Returns an LZW compressed list of the input character sequence.
    """
    timeStart = getruntime()
    output = []
    table = dict(self._str_to_code)

    s = ''
    for ch in longstr:
      it = s + ch
      if it in table:
        s = it
      else:
        output.append(table[s])
        table[it] = len(table)
        s = ch

    output.append(table[s])
    serialized = self._serialize(output)
    timeEnd = getruntime()
    if len(longstr) == 50000:
      print '[%f]'%(timeEnd - timeStart) ,
    return serialized

  def _decompress(self, seq):
    """
    Returns a decompressed string of the LZW compressed input.
    """
    seq = self._deserialize(seq)

    table = self._code_to_str[:]
    prevcode = seq[0]

    output = ""
    output += table[prevcode]

    for code in seq[1:]:
      try:
        entry = table[code]
      except IndexError:
        # The lzw special case when code is not yet defined.
        entry = table[prevcode]
        entry += entry[0]
      output += entry
      table.append(table[prevcode] + entry[0])
      prevcode = code

    return output



  def _base36encode(self, number, alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    """
    Convert positive integer to a base36 string.
    """
    if not isinstance(number, (int, long)):
      raise TypeError('number must be an integer')
    if number < 0:
      raise ValueError('number must be nonnegative')

    # Special case for zero
    if number == 0:
      return '0'

    base36 = ''
    while number != 0:
      number, i = divmod(number, 36)
      base36 = alphabet[i] + base36

    return base36


  def _base36decode(self, number):
    return int(number,36)


  def _serialize(self, seq):
    ret = ""
    for number in seq:
      # convert to base 36
      numberstr = self._base36encode(number)

      # increase the ascii value the first character by 100 to separate from the previous base36str
      numberstr = chr(ord(numberstr[0]) + 100) + numberstr[1:]

      ret += numberstr

    return ret


  def _deserialize(self, string):
    seq = []
    numberstr = ""
    index = 0

    while index < len(string):

      numberstr += string[index]

      # if the next character is a separator or terminator, then process the current number.
      if (index+1 < len(string) and ord(string[index+1]) > 100) or (index+1 == len(string)):

        # decrease the ascii value of the first character by 100
        numberstr = chr(ord(numberstr[0]) - 100) + numberstr[1:]

        # convert to base 10
        number = self._base36decode(numberstr)

        seq.append(number)
        numberstr = ""

      index += 1

    return seq



