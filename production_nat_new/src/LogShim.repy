
class LogShim(EmptyShim):

  name = 'LogShim'

  def __init__(self, next_shim=None, optional_args=None):
    EmptyShim.__init__(self, next_shim, optional_args)

    self._lock = getlock()
    self._logfile = 'temp_log_%s.txt' % str(randomfloat())[2:]
    self._sockdict = {}
    self._addlog('__init__')


  def copy(self):
    return LogShim()


  def get_advertisement_string(self):
    # We don't want to advertise this shim
    return self.shim_stack.get_advertisement_string()


  # Private method that adds a valid entry to the loglist
  def _addlog(self, operation, sourceip=None, sourceport=None, destip=None, destport=None, socket=None):

    logentry = ' * '
    logentry += '%s at %s ' % (operation, getruntime())
    logentry += 'from %s:%s to %s:%s ' % (sourceip, sourceport, destip, destport)
    logentry += 'stack: %s ' % (self.shim_stack)
    if sock:
      logentry += 'socket: %s' % socket
    logentry += '\n\n'

    # append to logfile
    self._lock.acquire()
    fileobj = open(self._logfile, 'a')
    fileobj.write(logentry)
    fileobj.close()
    self._lock.release()



  # Wrapper for the callback function in waitforconn()
  def _log_waitforconn_callback(self, remoteip, remoteport, sock, th, lh):
    self._addlog('waitforconn_callback', 
                 sourceip=self._waitforconn_sourceip,
                 sourceport=self._waitforconn_sourceport,
                 destip=remoteip, destport=remoteport,
                 socket=sock)

    self._lock.acquire()
    self._sockdict[sock] = [self._waitforconn_sourceip,
                            self._waitforconn_sourceport,
                            remoteip, remoteport]
    self._lock.release()

    self._waitforconn_callback(remoteip, remoteport, sock, th, lh)



  def _shim_waitforconn(self,host,port,callback):
    self._waitforconn_callback = callback
    self._addlog('waitforconn', sourceip=host, sourceport=port)

    self._waitforconn_sourceip = host
    self._waitforconn_sourceport = port

    return self.shim_stack.waitforconn(host,port,self._log_waitforconn_callback)



  def _shim_openconn(self,host,port,localhost=None,localport=None,timeout=5):
    self._addlog('openconn', sourceip=localhost, sourceport=localport, destip=host, destport=port)
    return self.shim_stack.openconn(host,port,localhost,localport,timeout)



  # Wrapper for the callback function in recvmess()
  def _log_recvmess_callback(self, remoteip, remoteport, msg, handle):
    self._addlog('recvmess_callback', 
                 sourceip = self._recvmess_sourceip,
                 sourceport = self._recvmess_sourceport,
                 destip=remoteip, destport=remoteport)

    self._recvmess_callback(remoteip, remoteport, msg, handle)



  def _shim_recvmess(self,host,port,callback):
    self._recvmess_callback = callback
    # This is not logged, because this method is usually placed within a loop.
    #self._addlog('recvmess', sourceip=host, sourceport=port)

    self._recvmess_sourceip = host
    self._recvmess_sourceport = port

    return self.shim_stack.recvmess(host, port, self._log_recvmess_callback)



  def _shim_sendmess(self,host,port,msg,localhost=None,localport=None):
    self._addlog('sendmess', sourceip=localhost, sourceport=localport, destip=host, destport=port)
    return self.shim_stack.sendmess(host,port,msg,localhost,localport)



  def _shim_stopcomm(self,handle):
    self._addlog('stopcomm')
    return self.shim_stack.stopcomm(handle)


  def _shim_socket_send(self, socket, msg):
    self._addlog('socket_send')
    return self.shim_stack.socket_send(socket, msg)

  def _shim_socket_recv(self, socket, bytes):
    self._addlog('socket_recv')
    return self.shim_stack.socket_recv(socket, bytes)

  def _shim_socket_close(self, socket):
    self._addlog('socket_close')
    return self.shim_stack.socket_close(socket)

