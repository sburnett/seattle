"""
<Program Name>
  hidesizeshim.repy

<Author>
  Fraida Fund (ffund01@students.poly.edu)

<Date Started>
  December 1, 2012

<Purpose>
  'Bloats' the data payload sent over a TCP socket with a random number of extra 
  bytes, to hide the true size of a message from potential eavesdroppers.

  Meant to be layered on top of some kind of encryption shim, otherwise it is 
  basically useless!
"""


dy_import_module_symbols("shim_exceptions")

# Use 'random' to select how many bytes to add, and to get random bytes
dy_import_module_symbols('random')




def _hidesize_socket_atomic_operation(target_func):
  def wrapper(self, *args, **kwargs):
    try:
      self._atomic_lock.acquire(True)
      return target_func(self, *args, **kwargs)
    finally:
      self._atomic_lock.release()

  return wrapper




class HideSizeSocket():

  def __init__(self, socket, shim):
    self.socket = socket
    self.shim = shim

    # Initialize all the necessary dictionaries and sets.
    self._send_buf = ''
    self._recv_buf = ''
    self._result_buf = ''

    self._full_lock = createlock()
    self._empty_lock = createlock()
    self._mutex_lock = createlock()
    self._atomic_lock = createlock()

    self.closed_local = False
    self.closed_remote = False
    self.close_lock = createlock()

    # FF: The "full" lock is initialized to locked, so that the sending thread  
    # will sleep until there is data to send (the lock will be released by the 
    # compression thread after it places data in the send buffer)
    self._full_lock.acquire(True)

    # FF: Create the sending thread for this connection
    createthread(self._send_pending_data)


  def send(self, msg):
    """ 
      Bloating thread. Picks a random int and gets that many random bytes to 
      append to the original data chunk. Prepends lengths of the data and extra 
      data as a header, and adds the chunk to the send buffer if it is empty.

      (If the send buffer is full, we raise SocketWouldBlockError)

    """

    if self.closed_local:
      raise SocketClosedLocal("Socket closed locally!")

    if self.closed_remote:
      raise SocketClosedRemote("Socket closed remotely!")

    # How much of the original data has been sent successfully.
    total_original_bytes_sent = 0

    # Create a bloated chunk of data out of the original message.
    header = ""

  
    msg_length = len(msg)
    # Don't send more "junk" data than the original message data
    extradata_length = min(random_int_below(self.shim._MAX_BYTES),random_int_below(len(msg)))
    extradata = ''.join(random_sample(list(msg),extradata_length))

    # Append header information to indicate the length of the block
    header += str(msg_length) + ',' + str(extradata_length) + ','
    body = msg + extradata

    # Block is comprised of header and data + extra data
    block_data = header + body


    # If the send buffer is empty, place this block in the send buffer
    empty = self._empty_lock.acquire(False)
    mutex = self._mutex_lock.acquire(False)
    if mutex and empty:
      self._send_buf = block_data
      self._mutex_lock.release()
      self._full_lock.release()
      total_original_bytes_sent += len(msg)
    else:
      # Release any lock we may have successfully acquired:
      if empty:
        self._empty_lock.release()
      if mutex:
        self._mutex_lock.release()

    # If we have not sent any data, then the send buffer the system's send buffer must be full 
    # and we raise SocketWouldBlockError
    if total_original_bytes_sent == 0 and len(msg) > 0:
      raise SocketWouldBlockError

    return total_original_bytes_sent
        
      



  @_hidesize_socket_atomic_operation
  def recv(self, bytes):
    """ 
      Receive into the receive buffer until the socket blocks.

      Then, from the receive buffer, we reconstruct the "real" data from the 
      "bloated" data.

    """

    if self.closed_local:
      raise SocketClosedLocal("Socket closed locally!")

    if self.closed_remote:
      raise SocketClosedRemote("Socket closed remotely!")

    # Get the result buffer out of the dictionary.
    result_buf = self._result_buf

    # If result buffer already has enough data in it, then we just return it.
    if len(result_buf) > bytes:
      requested_data = result_buf[0 : bytes]
      self._result_buf = result_buf[len(requested_data) : ]
      return requested_data

    # Otherwise, we need to get fresh data off the wire and process it:

    recv_exception = None

    # Receive as much as possible into the receive buffer
    while True:
      try:
        self._recv_buf += self.socket.recv(4096)

      # Stop trying to receive when there is no more data to read from the socket
      except SocketWouldBlockError:
        break

      # If a different exception occurs, save it first and raise it later
      # when we run out of data to return (i.e. empty result buffer). The socket
      # is now considered inactive. We remove it from the active socket set.
      except (SocketClosedLocal, SocketClosedRemote), err:
        self.closed_remote = True
        recv_exception = err
        break


    # Reconstruct the 'real' message from the bloated TCP stream we have in the 
    # receive buffer, and add it to the result buffer.
    while True:
      bloated_block = self._reconstruct_blocks()
      if bloated_block is None:
        break
      elif len(bloated_block) > 0:
        result_buf += bloated_block

    # If there is nothing in the result buffer, we have received all the data.
    if result_buf == '':

      # If we have saved exceptions, we raise them now, as these exceptions
      # occurred at the end of the received stream.
      if recv_exception:
        raise recv_exception

      # If we run out of data without any other exceptions.
      else:
        raise SocketWouldBlockError

    # Otherwise, return the number of bytes requested by the application 
    # and remove from result buffer
    requested_data = result_buf[0 : bytes]
    self._result_buf = result_buf[len(requested_data) : ]

    return requested_data


  def close(self):
    self.close_lock.acquire(True)
    result = not self.closed_local
    self.closed_local = True
    self.close_lock.release()

    empty = self._empty_lock.acquire(False)
    mutex = self._mutex_lock.acquire(False)
    if mutex and empty:
      self._send_buf = ''
      self._mutex_lock.release()
      self._full_lock.release()
    else:
      # Release any lock we may have successfully acquired:
      if empty:
        self._empty_lock.release()
      if mutex:
        self._mutex_lock.release()

    return result



  def _reconstruct_blocks(self):
    """
    Helper method for the socket_recv method. Reconstructs and returns the
    "real" data starting from the head of the receive buffer. If
    there is nothing in the receive buffer to reconstruct, returns None. 

    """
    # Get the receive buffer. 
    recv_buf = self._recv_buf

    # Return no blocks if the buffer is empty
    if recv_buf == '':
      return None

    # Use this string to keep track of the length of the message or the extra data
    length_str = ''

    msg_length = -1
    extradata_length = -1

    # Position in the receive buffer 
    cur_position = 0


    while True:

      # Read the header of the block, a char at a time, until two commas
      try:
        char = recv_buf[cur_position]

      # If we reach the end of the buffer without having received the full 
      # header, we will have to return None
      except IndexError:
        return None

      cur_position += 1

      # If we encounter a comma, it may signify that we have the msg length or 
      # the length of the extra data:
      if char == ',':
        if msg_length == -1:
          msg_length = int(length_str)
          length_str = ''
        elif extradata_length == -1:
          extradata_length = int(length_str)
          break

      elif char.isdigit():
        length_str += char

      # If we are still reading the header and we get something that is neither 
      # a comma nor a digit, we must have a bug
      else:
        err_str = 'HideSizeShim: Invalid character at position ' + str(cur_position) 
        err_str += ' in recv buffer: ' + str(recv_buf)
        raise ShimInternalError(err_str)
    
    # If we haven't received the entire "bloated" chunk, we return None
    if cur_position + msg_length + extradata_length > len(recv_buf):
      return None

    # Otherwise, get the bloated chunk out of the buffer and return the "real" 
    # data part of it
    block_body = recv_buf[cur_position : cur_position + msg_length]
    cur_position += msg_length
    cur_position += extradata_length
    self._recv_buf = recv_buf[cur_position : ]
    return block_body[0 : msg_length ]


  def _send_pending_data(self):
    """
    FF: Sending thread. When there is data in the send buffer (signaled by the "full"
    lock becoming available), it keeps trying to send until the buffer is empty, 
    at which point it signals to the compression thread by releasing the "empty" lock.
    """

    while True:
      self._full_lock.acquire(True)
      self._mutex_lock.acquire(True)

      try:
        send_buf = self._send_buf
        bytes_to_send = len(send_buf)
        
        # Send everything in the send buffer and remove it from the buffer.
        while send_buf:
          sent_bytes = 0
          try:
            sent_bytes = self.socket.send(send_buf)
          except SocketWouldBlockError, err:
            pass
          except (SocketClosedLocal, SocketClosedRemote), err:
            self.closed_remote = True
            return
          send_buf = send_buf[sent_bytes : ]

        if self.closed_local:
          self.socket.close()
          return

      finally:
        # When the send buffer is empty, release the locks and sleep until there
        # is more data to send
        self._mutex_lock.release()
        self._empty_lock.release()




class HideSizeShim(BaseShim):

  def __init__(self, shim_stack, optional_args=None):
    """
    In the optional arguments, you can specify the maximum number of bytes to 
    append on each send call. For example, if the shim string is 
    '(HideSizeShim,1024)' then a random number of bytes up to 1024 
    will be appended to each chunk of data that is sent.

    If it is not specified, then the default of 1024 will be used. 

    """

    # If optional args is provided, use it to limit the number of bytes that
    # will be appended.
    if optional_args:
      max_size = int(optional_args[0])
      self._MAX_BYTES = max_size
    else:
      self._MAX_BYTES = 1024

    BaseShim.__init__(self, shim_stack, optional_args)



  def copy(self):
    return HideSizeShim(self.shim_context['shim_stack'].copy(), self.shim_context['optional_args'])


  
  def get_advertisement_string(self):

    optional_args = self.shim_context['optional_args']
    shim_name = '(HideSizeShim'

    if optional_args:
      shim_name += ',' + str(optional_args[0]) + ')'
    else:
      shim_name += ')'

    return shim_name + self.get_next_shim_layer().get_advertisement_string()




  def tcpserversocket_getconnection(self, tcpserversocket):
    """
    Sets up dictionaries, sets, locks, threads, and other necessary things

    """

    # Call the next layer of tcpserver_getconnection()
    (remote_ip, remote_port, repy_socket) = self.get_next_shim_layer().tcpserversocket_getconnection(tcpserversocket)

    return (remote_ip, remote_port, HideSizeSocket(repy_socket, self))



  def openconnection(self, destip, destport, localip, localport, timeout):
    """
    Sets up dictionaries, sets, locks, threads, and other necessary things

    """

    # Call the next layer of openconnection.
    repy_socket = self.get_next_shim_layer().openconnection(destip, destport, localip, localport, timeout)

    return HideSizeSocket(repy_socket, self)


  def socket_send(self, socket, msg):
    return socket.send(msg)


  def socket_recv(self, socket, bytes):
    return socket.recv(bytes)


  def socket_close(self, socket):
    return socket.close()

