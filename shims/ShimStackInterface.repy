"""
<Program Name>
  ShimStackInterface.repy

<Author>
  Danny Y. Huang, yh1@cs.williams.edu
  Monzur Muhammad, monzum@cs.washington.edu

<Date Started>
  June 2010, refactored in Feb 2011.

<Purpose> 
  Main entry point for all applications that use shim. Provides a wrapper for
  the shim stack object for easy instantiation. Also catches any exceptions that
  are not consistant with the API semantics. Provides logging capabilities.

"""

include ShimStack.repy

# ===========================================================================
# Include all shims available
# ===========================================================================

include BaseShim.repy
include NoopShim.repy


# ===========================================================================
# Register all shims available
# ===========================================================================

register_shim('BaseShim', BaseShim)
register_shim('NoopShim', NoopShim)





class ShimStackInterface:


  def __init__(self, stack_str="", localhost=""):

    # If no shims are supplied, we need to plug in the NoopShim.
    if stack_str == "":
      stack_str = "(NoopShim)"

    # Set the instance variables
    self._stack_str = stack_str
    self._localhost = localhost

    
    

  def getmyip(self):
    """
    Return the hostname that is associated with the localmachine. It could be
    some random key or server name, that was defined at initialization.
    """
    return self._localhost



  # ...........................................................................
  # Public methods that interface with the application. 
  # ...........................................................................

  def sendmessage(self, destip, destport, message, localip, localport):
    shim_stack = ShimStack(self._stack_str, self._localhost)
    return shim_stack.sendmessage(destip, destport, message, localip, localport)



  def openconnection(self, destip, destport, localip, localport, timeout):
    shim_stack = ShimStack(self._stack_str, self._localhost)
    return shim_stack.openconnection(destip, destport, localip, localport, timeout)



  def listenformessage(self, localip, localport):
    shim_stack = ShimStack(self._stack_str, self._localhost)
    return shim_stack.listenformessage(localip, localport)



  def listenforconnection(self, localip, localport):
    shim_stack = ShimStack(self._stack_str, self._localhost)
    return shim_stack.listenforconnection(localip, localport)
