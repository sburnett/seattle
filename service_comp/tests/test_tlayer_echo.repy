

DEFAULT_SHIM_STACK_NAMES = '(ClientServerShim,[CoordinationShim],[CoordinationShim][AddOne][PhysConn])'



include layermain.repy
include StandardShims.repy
include TCP_TLayer.repy




class AddOne(TCP_TLayer):
  # a silly layer that adds 1 to numbers sent over sockets
  # when they are sent and recived
  # NOTE for testing only, does not preserver semantics
  name ='AddOne'

  class T_Socket:
    def __init__(self,socket):
      self.socket = socket

    def recv(self,n):
      return int(self.socket.recv(n)) + 1

    def send(self,n):
      self.socket.send(str(int(n)+1))

    def close(self):
      self.socket.close()

# add add one to the layer dict
layermain_reg_layer('AddOne',{'class':AddOne})



def echo(remotekey,remoteport,socket,localip,localport):
  # echo back one char at a time
  try:
    while True:
      socket.send(socket.recv(1))
  except:
    sock.close()
  

if callfunc == 'initialize':
  
  serverkey = 'TLAYERECHO'  
  handle = layered_waitforconn(serverkey,12345,echo)

  sock = layered_openconn(serverkey,12345)

  for i in range(5):
    sock.send(i)
    msg = sock.recv(1)
    if msg != i+4:
      print 'FAILED: got '+str(msg)+' expected '+str(i+4)
  
  sock.close()
  layered_stopcomm(handle)
