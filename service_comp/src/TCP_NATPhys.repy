# a nat layer that does a local physical waitforconn branch

include NatShim.repy

class NATPhys(NATLayer):

  name = 'NATPhys'

  def __init__(self,next_shim=None,optional_args=None):
    self.stack2 = None
    NATLayer.__init__(self,next_shim,optional_args)

  def waitforconn(self,key,port,callback):

    new_stack = ShimStack('(PhysConn)')
    self.stack2 = new_stack

    handle1 = new_stack.waitforconn(key,port,callback)

    handle2 = NATLayer.waitforconn(self,key,port,callback)

    return (self.name,handle1,handle2)


  def stopcomm(self,handle):
    
   (name,handle1,handle2) = handle
   
   if name != self.name: 
     raise Exception('bad comm handle in NATPhys stopcomm: '+str(name))

   ret1 = stopcomm(handle1)
   ret2 = NATLayer.stopcomm(self,handle2)

   return ret1 and ret2

  def get_names(self):
    list1 = NATLayer.get_names(self)
    list2 = self.stack2.get_names()

    # combine both lists
    list1.extend(list2)
    return list1
    


layermain_reg_layer('NATPhys',{'class':NATPhys})    
