include layermain.repy
include NatShim.repy
include session.repy

# place this shim into a shim stack without the Nat layer.  IF the nat layer is needed this layer will add it



class TCPNatDecider(EmptyShim):

  #on each wait for conn run a method to determine
  # if this nodes needs to use nat
  name = 'NatDecider'

  def waitforconn(self,key,port,callback):
  
    # detect if we need to use nat
    use_nat = self.check_behind_nat()

    if use_nat:
      self.shim_stack.push(NATLayer())

    return self.shim_stack.waitforconn(key,port,callback)
    
  def check_behind_nat(self):
    (nat_key,nat_port) = forwarder_lookup('natforwarder')[0]
    sock = layered_openconn(nat_key,nat_port)
    sock.send('?')
    session_sendmessage(sock,getmyip())
    result = session_recvmessage(sock)
    sock.close()   

    if result == 'behind_nat':
      return True
    elif result == 'not_behind_nat':
      return False
    else:
      raise Exception('Protocol error while checkin behind nat')


  def get_names(self):
    return self.shim_stack.get_names()


layermain_reg_layer('NatDecider',{'class':TCPNatDecider})
