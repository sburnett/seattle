"""
<Program Name>
  nat_forwarder.py

<Started>
  Jan 3, 2010

<Author>
  Eric Kimbrel

<Purpose>
  Provide a working nat forwarding service.

  This program is a NAT FORWARDER.  A server connects and registers. 
  Clients then connect and request the server.The srv  opens a new 
  connection to the forwarder and the client and server exchange traffic 
  through the forwarder.

  
Load Limiting Policy:

  Allow up to MAX_SERVERS servers to connect
    for each server there is one control socket
  for each server allow up to MAX_CLIENTS clients
    for each client there are two sockets and 2 threads


"""


include session.repy
include NAT_CONSTANTS.repy



MAX_SERVERS = 5
MAX_CLIENTS = 4 # for a total of 20 across all 5 clients


SRV_DICT = {}  # keep track of registered servers
CLT_DICT = {} # HOLDS CLIENT SOCKETS

NEW_SERVER_LOCK = getlock()




def check_servers():
  # check that servers are still alive and connected
  # delete closed sockets from the SRV_DICT
  servers = SRV_DICT.keys()
  remove_list = []
  for server in servers:
    try:
      sock = SRV_DICT[server]['sock']
      session_sendmessage(sock,NAT_CONNECTION_ALIVE)
      response = session_recvmessage(sock)
    except:      
      remove_list.append(server)
    else: 
      if response != NAT_YES:
        remove_list.append(server)
  
  for server in remove_list:
    safely_remove_server(server)
    print 'INFO: check_server_thread removed server '+server



def safely_remove_server(server):
  # safely remove a server from the list of servers
  # warning, NOT THREAD SAFE do locking outside of this method
  try:
    SRV_DICT[server]['sock'].close()
  except:
    pass
  try:
    del SRV_DICT[server]
  except KeyError:
    pass  #its possible this has gotten removed before
  




def new_srv(rip,rport,sock,th,lh):
  # handle server connections (waitforconns)  
  
  #Read the servers request
  try:
    action = session_recvmessage(sock)
    key = session_recvmessage(sock)
    port = session_recvmessage(sock)
  except:
    sock.close()
    print 'ERROR initially reading from new server request'


  # setup a new server 
  if action == 'INIT':
    NEW_SERVER_LOCK.acquire()
 
    # if there are MAX_SERVERS connected check to see if some are dead
    # and remove them, this is the only time we clean up old servers
    if len(SRV_DICT.keys()) >= MAX_SERVERS:
      check_servers()

      # if none were removed then we can't allow a new connection
      if len(SRV_DICT.keys()) >= MAX_SERVERS:
        try:
          session_sendmessage(sock,NAT_NO)
          sock.close()
        except:
          pass #TODO log this event?
      
        print 'MAX_SERVERS LIMIT REACHED, NOT ALLOWING NEW SERVER at '+rip
        NEW_SERVER_LOCK.release()
        return

    #register the srv
    SRV_DICT[key+','+port] = {'sock':sock,'lock':getlock(),'clts':0}
    NEW_SERVER_LOCK.release()
    print 'INFO: registered '+key+','+port

    # tell the forwarder it has registered
    try:
      session_sendmessage(sock,NAT_YES)    
    except:
      print 'ERROR sending ack to new server, dropping server: '+key+','+port
      NEW_SERVER_LOCK.acquire()
      safely_remove_server(key+','+port)
      NEW_SERVER_LOCK.release()


  
  elif action == NAT_NEW_CONN:
    # setup a new connection between a clt and srv

    try:
      clt_sock = CLT_DICT[key+','+port]
    except:
      print 'ERROR: server requested client that does not exist'
      try:
        session_sendmessage(sock,NAT_NO)
      except:
        sock.close() #TODO log this?
      return
    
    
    else:
      # if we found the clt confirm with the forwarder and start
      # exchanging traffic
      try:
        session_sendmessage(sock,NAT_YES)
      except:
        # TODO log this?
        sock.close()
      else:
        # exchange traffic
        settimer(0,exchange_streams,[sock,clt_sock,True])
        exchange_streams(clt_sock,sock,False)
    
      #del the clt dict entry when the connection is finished
      del CLT_DICT[key+','+port]


  # unknown action
  else:
    sock.close()
    print 'recived unknown request: '+msg





def new_clt(rip,rport,clt_sock,th,lh):
  # handle new client connections (nat openconns go here)  
  
  try:
    # read the srv that the clt wants to connect to
    key = session_recvmessage(clt_sock)
    port = session_recvmessage(clt_sock)
  except:
    sock.close()
    print 'ERROR initially reading from new clt'
    return 


  server = key+','+port

  
  try:
    # lookup the server in the registration
    control_sock = SRV_DICT[server]['sock']
    srv_lock = SRV_DICT[server]['lock']
  except:
    print 'ERROR: requested server not found'
    try:
      session_sendmessage(clt_sock,NAT_NO)
      clt_sock.close()
    except: pass #TODO log this?
    finally: return
  

  #add the clt to the clt dict
  CLT_DICT[rip+','+str(rport)] = clt_sock

  # begin the client/server handshake, 
  srv_lock.acquire()

  # don't allow if MAX_CLIENTS are allready connected
  if SRV_DICT[server]['clts'] >= MAX_CLIENTS:
    print 'INFO: maxclients recieved for '+key+':'+port+' not allowing new client'
    try:
      session_sendmessage(clt_sock,NAT_NO)
    except:
      clt_sock.close() #TODO log this?
    finally:
      srv_lock.release()
      return

  
  # tell the server it has a new connection
  response = None
  try:
    session_sendmessage(control_sock,NAT_NEW_CONN)
    session_sendmessage(control_sock,rip)
    session_sendmessage(control_sock,str(rport))
    session_sendmessage(control_sock,mycontext['myip'])
    session_sendmessage(control_sock,mycontext['myport'])
    
    #wait for the server to verify
    response = session_recvmessage(control_sock)

  except Exception,e:
    print 'ERROR communicating new connection request, removing server: '+server+' due to '+str(e)
    safely_remove_server(server)
    try:
      session_sendmessage(clt_sock,NAT_NO)
    except:
      pass #todo log this?
    finally:
      clt_sock.close()
      srv_lock.release()
      del CLT_DICT[rip+','+str(rport)]
      return 


  # check the servers response
  if response != NAT_YES:
    #send an error to the client
    print 'ERROR: requested server did not make new connection'
    try:
      session_sendmessage(clt_sock,NAT_NO)
    except:
      pass #todo log this?
    clt_sock.close()
    srv_lock.release()
    del CLT_DICT[rip+','+str(rport)]
    return
    

  try:
    # tell the client the connection is ready
    session_sendmessage(clt_sock,NAT_YES)
  except:
    # if the clt failed remove this clt
    del CLT_DICT[rip+','+str(rport)]
    clt_sock.close()    
    clt_ready =False
  else:
    clt_ready = True
    

  # communicate connection readiness to the server
  if clt_ready: srv_response = NAT_YES
  else: srv_response = NAT_NO
  try:
    session_sendmessage(control_sock,srv_response)
  except:
    # remove the server 
    srv_lock.release()
    safely_remove_server(server)
  else:
    #increment the number of clients for the server
    if clt_ready:
      SRV_DICT[server]['clts'] += 1
      clts = SRV_DICT[server]['clts']
      srv_lock.release()
      print 'INFO: recieved client #'+str(clts)+' for srv '+server

 

# exchange traffic between two sockets
# until an exception occurs
def exchange_streams(from_sock,to_sock,do_print):
  while True:
    try:
      msg = from_sock.recv(1024)
      to_sock.send(msg)
    except Exception,e:
      if do_print: print 'INFO: terminated a connection because, '+str(e)
      from_sock.close()
      to_sock.close()
      return
            



# TODO,  THIS IS NOT YET IMPLEMENTED /TESTED
def check_behind_nat(rip,rport,sock,th,lh):
  #niave implementation 
  # returns true if ip's differ returns true
  # if the are the same returns false
  
  local_ip = session_recvmessage(sock)
  
  behind_nat = rip != local_ip
  
  if behind_nat:
    session_sendmessage(sock,'behind_nat')
  else:
    session_sendmessage(sock,'not_behind_nat')

  sock.close()




def common_entry(rip,rport,sock,th,lh):
  # common entry point for clients and servers
  # determine what type of connection this is
  # and call the appropriate method

  try:
    type = sock.recv(1)
  except Exception,e:
    print 'INFO error in common entry: '+str(e)
  else: 
    if type == NAT_CLIENT:
      new_clt(rip,rport,sock,th,lh)
    elif type == NAT_SERVER:
      new_srv(rip,rport,sock,th,lh)
    #elif type == '?':
    #  check_behind_nat(rip,rport,sock,th,lh)
    else:
      print 'INFO: invalid conn type recvied '+type
      sock.close()
  



if callfunc == 'initialize':

  if len(callargs) < 2:
    print 'usage: ip wait_port '
    exitall()
    
  ip = callargs[0]
  wait_port = int(callargs[1])
  
  # we need these when servers are making new connections 
  mycontext['myip'] = ip
  mycontext['myport']= str(wait_port)

  waitforconn(ip,wait_port,common_entry)
  
