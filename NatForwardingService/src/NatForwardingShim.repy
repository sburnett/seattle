"""
<Program Name>
  NatForwardingShim.repy

<Started>
  Jan 5, 2010

<Author>
  Eric Kimbrel

<Purpose>
  Provide a NAT (network address translator) forwarding service within the 
  service compostion framework

  When a server does a nat_waitforconn he connects to a nat_forwarder and
  registers.  When a client connects the to the nat_forwarder the nat_forwarder
  uses the control sock to have the server open a new connection.  Traffic
  is then exchanged  via the nat_forwarder


  when completed this library should..

    optionally takes a socket connection to a forwarder on shim construction
    creates a socket connection to a forwarder ( if one is not provided)
    manages re-connection of connection to the forwarder is lost
    advertises the forwarder connection
    listens for connection requests over a control socket
    makes new connections to the forwarder for client communications
    Provides meaningful exceptions when connections are rejected

"""


include session.repy
include ShimStack.repy
include NAT_CONSTANTS.repy
include advertise.repy
include NullShim.repy





class NatConnError(Exception):
  # base class for problem with nat connections
  pass

class NatLookupError(NatConnError):
  # unable to lookup a needed value
  pass



# custom obj used as a comm handle and to keep state 
# for diffent calls to waitforconn
class NatStateObj:
  def __init__(self,sock,running,host,callback,port,forwarder_ip,forwarder_port):
    self.sock = sock
    self.running = running
    self.callback = callback
    self.host = host
    self.port = port
    self.adkey = host+':'+str(port)
    self.adval = forwarder_ip +':'+str(forwarder_port)



class NatForwardingShim():
  
  advertise_wait_time = 60
  name ='NatForwardingShim'

  # create a cache to store forwarder lookups
  forwarder_cache = {'tuple_list':None,'lock':getlock()}

  # cache clt lookups
  clt_cache = {}
  clt_cache_lock = getlock()

  ######    CONSTRUCTOR

  def __init__(self,next_shim=None,optional_args=None,control_sock=None):
    

    self.shim_stack = ShimStack(next_shim)
    
    self.state_objs = {}
    

    # hop_key and hop_port can be used to avoid doing a lookup with
    # openconn, primarily used for testing
    self.hop_key = None
    self.hop_port = None

    # optional args should not be supplied, or should be a hop key and port
    # note: these are done as optional args to conform with ShimStack standards
    if optional_args is not None:
      if len(optional_args) == 2:
       self.hop_key = optional_args[0]
       self.hop_port = int(optional_args[1])
      else:
        raise Exception("Improper optional args passed into NatForwardingShim")
    
    

  #######  SERVER METHODS  



  def waitforconn(self,key,port,callback):
    """
    <Purpose>
      Provide a means to register with a nat_forwarder and wait for connections

    <Arguments>
      key: They srv key to register with a nat forwarder, its up to the user
      of this library to come up with a unique value to use as key, and to 
      communicate this key to potential clients.

      port: The port to be used

      localip,localport: see openconn
  
      callback: see waitforconn

    <Exceptions>
      Sock exceptions may occur in event of connection failure, etc
    
    <Side Effects>
      1 thread is consumed to wait for connections over the control socket
      1 thread is consumed to advertise this connection

      every call to waitforconn will use 2 threads, until stopcomm is called

    """

    if port in self.state_objs:
      # if this port alreayd has an active listener just replace the callback
      state_obj = self.state_objs[port]
      state_obj.callback = callback
      return state_obj


    # establish a control socket with a forwarder
    (for_ip,for_port,control_sock) = self.establish_control_sock(key,port)
    
    # create a new state object for this listener
    state_obj = NatStateObj(control_sock,True,key,callback,port,for_ip,for_port)

    self.state_objs[port] = state_obj

    # advertise this connection so the host can be ound by clients
    settimer(0,self.advertise_host,[state_obj])

    # start a thread to listen for new requests
    settimer(0,self.nat_waitfor_request,[state_obj])

    # return a handle
    return state_obj



  def establish_control_sock(self,key,port):
    # connect to a forwarder and establish a control socket
    # this control socket is used to listen for connection requests

    if self.hop_key is not None and self.hop_port is not None:
      # use the manually configured forwarder if it exists
      control_sock = self.shim_stack.openconn(self.hop_key,int(self.hop_port))  
      for_ip = self.hop_key
      for_port = int(self.hop_port)
    
    else:
      # use the lookup mechanism to find a forwarder
      
      self.forwarder_cache['lock'].acquire()      
      connected = False
      is_cache_fresh = False # if we have fresh cache
      
      #check that we actually have a cache
      if self.forwarder_cache['tuple_list'] is None:
        self.forwarder_cache['tuple_list'] = self.forwarder_lookup()
        is_cache_fresh = True

      while not connected:
        ex_str =''
        for (for_ip,for_port) in self.forwarder_cache['tuple_list']:
          try:
            control_sock = self.shim_stack.openconn(for_ip,for_port)
          except Exception,e:
            ex_str = ex_str+' '+str(e)
          else:
            connected = True
            break
    

        if not connected:
          if is_cache_fresh: 
            self.forwarder_cache['lock'].release() 
            raise NatConnError("Unable to establish control socket: "+ex_str)
          else:
            self.forwarder_cache['tuple_list'] = self.forwarder_lookup()
            is_cache_fresh = True

   
      self.forwarder_cache['lock'].release()


    #register the with the forwarder
    control_sock.send(NAT_SERVER) 
    session_sendmessage(control_sock,NAT_INIT)
    session_sendmessage(control_sock,str(key)) 
    session_sendmessage(control_sock,str(port))

  
    # see if the connection was established
    response = session_recvmessage(control_sock)
    if response != NAT_YES:
      raise Exception, 'NAT node refused connection'

    return (for_ip,for_port,control_sock)




  def establish_comms_sock(self,control_sock):
    # upon recieve a connection request make a new connection
    # to the forwarder to facilliate the communication
    # raises an exception if failure occurs

    # read the connection request over the control socket
    remote_key = session_recvmessage(control_sock)
    remote_port = session_recvmessage(control_sock)
    forwarder_ip = session_recvmessage(control_sock)
    forwarder_port = session_recvmessage(control_sock)

    # create the new connection
    new_sock = self.shim_stack.openconn(forwarder_ip,int(forwarder_port))
    new_sock.send(NAT_SERVER)
    session_sendmessage(new_sock,NAT_NEW_CONN)
    session_sendmessage(new_sock,remote_key)
    session_sendmessage(new_sock,remote_port) 
    
    # verify the connection is established
    response = session_recvmessage(new_sock)
    if response != NAT_YES:
      new_sock.close() # this connection failed
    else:
      # confirm the connection over the control sock 
      session_sendmessage(control_sock,NAT_YES)
      
      # wait for the forwarder to verify that the socket is ready
      # to pass up to the users fuction
      response = session_recvmessage(control_sock)
      
      # return the connection along with the identity of the clt
      if response == NAT_YES: return (remote_key,remote_port,new_sock)
      else: raise Exception("Establish comms failed")
     


  def stopcomm(self,handle):  
    """
    acts just like a stopcomm

    """

    if not isinstance(handle,NatStateObj):
      raise Exception("Bad handle passed to NatFOrwardingSHim.stopcomm ")
     
    handle.running = False
    handle.sock.close()
    
    # remove this port fromt the list of active state objects
    del self.state_objs[handle.port]
    
    return True




  
  def nat_waitfor_request(self,state_obj):
    # wait for requsts for new connections over a control socket

    while state_obj.running:
      # do this until stopcomm is called 
      try:
        request = NAT_CONNECTION_ALIVE
       
        # respond to forwarder checks to see if this connection is still
        # active, if we've lost the control sock we will detect it here
        # and can reconnection
        while request == NAT_CONNECTION_ALIVE:
          try:
            request = session_recvmessage(state_obj.sock)
            if request != NAT_CONNECTION_ALIVE: break
            session_sendmessage(state_obj.sock,NAT_YES)  
          except:
            # error over the control socket, establish a new one
            if state_obj.running:
              state_obj.sock.close()
              (for_ip,for_port,state_obj.sock) = self.establish_control_sock(
                                                state_obj.host,state_obj.port)
              state_obj.adval=for_ip+':'+str(for_port)
            else:
              raise # if stop has been called don't re-establish

        # take a request to make a new connection 
        if request != NAT_NEW_CONN:
          raise Exception("in establish comms sock with request: "+request)  
       
        # try to establish the new connection
        try:
          (remote_key,remote_port,comms_sock) = self.establish_comms_sock(state_obj.sock)
        except:
          pass #todo log this? there was a failure setting up a new connection
        else:
          # new connection complete, send socket to callback func
         
          # WARNING, i just return the socket as the listen handle, TODO,
          # make sure this works
          state_obj.callback(remote_key,remote_port,comms_sock,state_obj,comms_sock)    
     
      except Exception, e:
        if state_obj.running:
          #stopcomm has not been called and the connection failed
          raise Exception('ERROR OCCURED IN nat_watifor_request '+str(e))      
     
       



  ############ CLIENT METHODS


  def openconn(self,id,port,localip=None,localport=None,timeout=5):
    """
    <Purpose>
      creates a "virtual" connection to the desired host but connecting
      to a forwarder that will exchange traffic between the host and a
      socklikeobj returned by this function

    <Retruns>
      a socket like object

    <Exceptions>
      see openconn
      Exception if Forwarder rejects connection   

    <Warning> TODO: Does not correctly adhere to timeout semantics

    """  
    
    if self.hop_key is not None and self.hop_port is not None:
      # if a hop key and port have been specified, use em.
      base_sock = self.shim_stack.openconn(self.hop_key,self.hop_port,localip,localport,timeout)
      self.establish_client_server_conn(base_sock,id,port)
      return base_sock

    else:
      # lookup the host's forwarder, note that this is a list
      # because old advertisements might still be in the DHT
      
      host_key = id+':'+str(port)

      self.clt_cache_lock.acquire()

      if host_key in self.clt_cache:
        fresh_cache = False
      else:
        try:
          self.clt_cache[host_key]= self.lookup_host(id,port)
          fresh_cache = True
        except Exception,e:
          self.clt_cache_lock.release()
          raise NatLookupError(str(e))

      
      while True:
        # this loop breaks when we get a connection of decide
        # to fail, loops is executed at most twice 
 
        exception_str = ''
        for (forip,forport) in self.clt_cache[host_key]:
          try:
            base_sock = self.shim_stack.openconn(forip,forport,localip,
                                               localport,timeout)
            self.establish_client_server_conn(base_sock,id,port)
          except Exception,e:
            exception_str = exception_str+',  '+str(e)
          else:
            # established a connection, return the socket
            self.clt_cache_lock.release()
            return base_sock

        # we tried all the forwarders and could not establish a connection
        if not fresh_cache:
          # freshen the cache and try again
           try:
             del self.clt_cache[host_key]
             self.clt_cache[host_key]= self.lookup_host(id,port)
             fresh_cache = True
           except Exception,e:
             self.clt_cache_lock.release()
             raise NatLookupError(str(e))
        else:
          # if we already had fresh cache then fail  
          del self.clt_cache[host_key]
          self.clt_cache_lock.release()
          raise NatConnError("Failed to get connection: "+exception_str)
      



  def establish_client_server_conn(self,base_sock,id,port):
    #used by opennconn to establish connection

    # specify this is a client connection, and what server we want
    try:
      base_sock.send(NAT_CLIENT)
      session_sendmessage(base_sock,str(id)) 
      session_sendmessage(base_sock,str(port))
    except Exception,e:
      raise NatConnError("Error initializing socket connection: "+str(e))    

    # see if the connection was established
    response =  session_recvmessage(base_sock)
    if response != NAT_YES:
      base_sock.close()
      if response == NAT_SERVER_NOT_FOUND:
        raise NatConnError('The Host requested was not found at the forwarder')
      elif response == NAT_FORWARDER_BUSY:
        raise NatConnError('The Host requested has reach its client capacity')
      elif response == NAT_SERVER_ERROR:
        raise NatConnError('The Host requested suffered an unexpected error during connection')
      else:
        raise NatConnError("Unknown nat failure: "+response)

    #if the connection is established we can return the socket
    return base_sock



  ####   ADVERTISE / LOOKUP METHODS


  def forwarder_lookup(self):
    # retrns a list of forwarders in the form [(ip,port),...]
    # ordered by the server load on the forwareders
    # 
    # raises exception if no valid forwarder entries are found

    try:
      #TODO remove lookup type when DOR is fixed
      raw_data = advertise_lookup(NAT_FORWARDER,
                            lookuptype=['central','opendht'])
    except:
      raise NatLookupError("No Nat Forwarders were found")


    # hash the forwarders based on the load they have    
    tuple_list_dict = {}
    for item in raw_data:
      try:
        (ip,port,load) = item.split(':')
        port = int(port)
      except:
        pass  # throw out invalid entries, todo log this?
      else:
        if load not in tuple_list_dict:
          tuple_list_dict[load] = []
        tuple_list_dict[load].append((ip,port))

    if len(tuple_list_dict) < 1:
      raise NatLookupError("No Valid entries were found for nat forwarders")


    # drop all of the tuples into a list ordered by increasing 
    # forwarder load
    ranked_tuple_list = []
    key_list =  tuple_list_dict.keys()
    key_list.sort()
    for key in key_list:
      for tuple in tuple_list_dict[key]:
        ranked_tuple_list.append(tuple)
    
    return ranked_tuple_list






  def advertise_host(self,state_obj):
    while state_obj.running:
      
      try:
        advertise_announce(state_obj.adkey,state_obj.adval,
                                self.advertise_wait_time*2)
      except:
        pass  #TODO can i provid some kind of indication that this happens?


      # sleep in increments so that we stop this thread
      # as soon as possible after stopcomm
      slept = 0      
      while slept < self.advertise_wait_time:
        if not state_obj.running: return
        slept += 5
        sleep(5)
      
      


  def lookup_host(self,host,port):
    # returns a list of tuples (forwarderip,forwarderport)
    # TODO remove lookuptype when DOR advertise is fixed
    raw_list = advertise_lookup(host+':'+str(port),
                                 lookuptype=['central','opendht'])
    if raw_list is None or len(raw_list) == 0:
      raise NatLookupError('No lookup results for: '+host+':'+str(port))

    tuple_list = []
    for item in raw_list:
      try:
        (ip,port) = item.split(':')
      except:
        pass
      else: tuple_list.append((ip,int(port)))

    if len(tuple_list) == 0:
      raise NatLookupError('No valid lookup results for: '+host+':'+str(port))
    else:
      return tuple_list






# register with the shimstack framework
shimstack_reg_layer('NatForwardingShim',{'class':NatForwardingShim})



