#pragma repy restrictions.test

"""
Author: Steven Portzer
Description:
This test verifies that new vessels are initialized with the security files
and will be run with the security layer restrictions in place.
"""

include time.repy
include nmclient.repy
include rsa.repy


# this will print output and cause the test to fail if the security layers
# aren't working in the given vessel
def check_secure(nmhandle, vessel):

  # it's more likely the program will fail to run since the neccessary
  # 'private_*' files don't exist, but we should check that the security
  # layers are in place if the user program can be run
  program = """
if callfunc == 'initialize':
  try:
    open('private_foo', 'w')
  except Exception:
    pass
  else:
    print "security layers not enabled"
"""

  # upload and run program
  nmclient_signedsay(nmhandle, "AddFileToVessel", vessel, "program.repy", program)

  nmclient_signedsay(nmhandle, "StartVessel", vessel, "program.repy")

  sleep(5)

  # get any log output
  logstring = nmclient_signedsay(nmhandle, "ReadVesselLog", vessel)

  # make sure the test passed
  if logstring:
    print logstring

  # make sure the vessel is not longer running
  try:
    nmclient_signedsay(nmhandle, "StopVessel", vessel)
  except Exception:
    pass


if callfunc == 'initialize':

  time_updatetime(34612)
  nmhandle = nmclient_createhandle(getmyip(), <nodemanager_port>)
  
  pubkey = {'e': 1515278400394037168869631887206225761783197636247636149274740854708478416229147500580877416652289990968676310353790883501744269103521055894342395180721167L, 'n': 8811850224687278929671477591179591903829730117649785862652866020803862826558480006479605958786097112503418194852731900367494958963787480076175614578652735061071079458992502737148356289391380249696938882025028801032667062564713111819847043202173425187133883586347323838509679062142786013585264788548556099117804213139295498187634341184917970175566549405203725955179602584979965820196023950630399933075080549044334508921319264315718790337460536601263126663173385674250739895046814277313031265034275415434440823182691254039184953842629364697394327806074576199279943114384828602178957150547925812518281418481896604655037L}

  myhandleinfo = nmclient_get_handle_info(nmhandle)

  myhandleinfo['publickey'] = pubkey

  myhandleinfo['privatekey'] = {'q': 54058458609373005761636236344701348569916976061233632302656354317296914836524068463339023907975088241991695932495814481647444694298985642399081803007236201209469946258941304883759055364999601996691930482382846773100579600645226048615117420700557109784424679718473031043919444221865548436936151591443700338637L, 'p': 163005946735584933080904947630005844643976533101833337498275325109161034533761907731163804211972028706576149578068245770343911608552263828770803393409524864116386113730846986186991705365903821748069417335817777744060812709585990055899981036005918570773920278122250955465866247822703170432353212868019982497201L, 'd': 2240169959722743128383109799584344927620631289695753164608137553948562513840905705755472646965204244185778446323692147882435315849145863268402636875283224769523136754021661455550898853194946272632624967823932300133454648259819576163836968537588009990175504497443778516954738281566994011669204200464480373455393955376955298830900816876217755539224711550233098080437180969137329334691279693903616444969433587901167778818088572448203744563568733073397445832643374417179790887207750843422586891294093361764515116975052446191135748633217162309228939861802346846701415099277659436864814394138247474263285983065177006045103L}

  nmclient_set_handle_info(nmhandle, myhandleinfo)

  resourcedata = """
resource cpu .01
resource memory 10000000   # 10 MiB
resource diskused 8000000 # 8 MiB
resource events 5
resource filewrite 10000
resource fileread 10000
resource filesopened 2
resource insockets 2
resource outsockets 2
resource netsend 10000
resource netrecv 10000
resource loopsend 100000
resource looprecv 100000
resource lograte 3000
resource random 10
resource messport 11111
resource messport 12222
resource connport 11111
resource connport 12222
"""


  # get the vessel to use...
  myvessel = nmclient_listaccessiblevessels(nmhandle,pubkey)[0][0]

  nmclient_signedsay(nmhandle, "SplitVessel", myvessel, resourcedata)

  mynewvessels = nmclient_listaccessiblevessels(nmhandle,pubkey)[0][:2]

  check_secure(nmhandle, mynewvessels[0])
  check_secure(nmhandle, mynewvessels[1])

  sleep(5)

  nmclient_signedsay(nmhandle, "JoinVessels", mynewvessels[0], mynewvessels[1])

  mynewestvessel = nmclient_listaccessiblevessels(nmhandle,pubkey)[0][0]

  check_secure(nmhandle, mynewestvessel)

