"""
<Program>
  servicelogger.py

<Date Started>
  January 24th, 2008

<Author>
  Brent Couvrette
  couvb@cs.washington.edu

<Purpose>
  Module abstracting away service logging.  Other modules simply have to call
  log with the name of the log file they wish to write to, and the
  servicelogger will write their message with time and pid stamps to the
  service vessel.  init must be called before log.
"""

import os
import logging
import time
import persist

# We don't import from repyportability because when this is imported from
# within repy, restrictions files are no longer honored.
include servicelookup.repy


logfile = None
servicevessel = None


def get_servicevessel():
  """
  <Purpose>
    Get a service vessel directory from vesseldict. If none of the
    service vessel directory exists, create a new directory with the first
    service vessel. If there is no service vessel returned, do nothing.
    
  <Arguments>
    None
             
  <Exceptions>
    None
        
  <Side Effects>
    servicevessel will be changed to the correct vessel directory
    
  <Returns>
    None
  """

  global servicevessel
  
  ownerkey = "22599311712094481841033180665237806588790054310631222126405381271924089573908627143292516781530652411806621379822579071415593657088637116149593337977245852950266439908269276789889378874571884748852746045643368058107460021117918657542413076791486130091963112612854591789518690856746757312472362332259277422867 12178066700672820207562107598028055819349361776558374610887354870455226150556699526375464863913750313427968362621410763996856543211502978012978982095721782038963923296750730921093699612004441897097001474531375768746287550135361393961995082362503104883364653410631228896653666456463100850609343988203007196015297634940347643303507210312220744678194150286966282701307645064974676316167089003178325518359863344277814551559197474590483044733574329925947570794508677779986459413166439000241765225023677767754555282196241915500996842713511830954353475439209109249856644278745081047029879999022462230957427158692886317487753201883260626152112524674984510719269715422340038620826684431748131325669940064404757120601727362881317222699393408097596981355810257955915922792648825991943804005848347665699744316223963851263851853483335699321871483966176480839293125413057603561724598227617736944260269994111610286827287926594015501020767105358832476708899657514473423153377514660641699383445065369199724043380072146246537039577390659243640710339329506620575034175016766639538091937167987100329247642670588246573895990251211721839517713790413170646177246216366029853604031421932123167115444834908424556992662935981166395451031277981021820123445253"
  ownerinfo = ""  
  vesseldict = persist.restore_object("vesseldict")

  service_vessels = servicelookup_get_servicevessels(vesseldict, ownerkey, ownerinfo)
  
  if service_vessels:
    found = False
    i = 0;
    while i < len(service_vessels) and (not found):
      found = os.path.isdir(service_vessels[i])
      i = i + 1
    
    if found:
      servicevessel = service_vessels[i-1]
    else:
      servicevessel = os.mkdir(service_vessels[0])
      
  return servicevessel
  

def init(logname):
  """
  <Purpose>
    Sets up the service logger to use the given logname, and the nodeman.cfg
    is in the given directory.
    
  <Arguments>
    logname - The name of the log file, as well as the name of the process lock
              to be used in the event of multi process locking
    cfgdir - The directory containing nodeman.cfg, by default it is the current
             directory
             
  <Exceptions>
    Exception if there is a problem reading from cfgdir/nodeman.cfg
    
  <Side Effects>
    All future calls to log will log to the given logfile.
    
  <Returns>
    None
  """

  global logfile, servicevessel
  
  servicevessel = get_servicevessel()
  
  if servicevessel != None:
    logfile = logging.circular_logger(servicevessel + '/' + logname, use_nanny=False)
  
  
def multi_process_log(message, logname, cfgdir):
  """
  <Purpose>
    Logs the given message to a log.  Does some trickery to make sure there
    no more than 10 logs are ever there. If the logfile or servicevessel is not
    set, this will do nothing.
    
  <Arguments>
    message - The message that should be written to the log.
    logname - The name to be used for the logfile.
    cfgdir - The directory that contains the vesseldict
  
  <Exceptions>
    Exception if there is a problem reading from cfgdir/nodeman.cfg or writing
    to the circular log.
      
  <Side Effects>
    The given message might be written to the log.
    
  <Returns>
    None
  """
  global servicevessel
  
  if servicevessel == None:
    # We need to make sure we are in the directory with vesseldict
    cwd = os.getcwd()
    os.chdir(cfgdir)
    servicevessel = get_servicevessel()
    os.chdir(cwd)
  
  if servicevessel == None:
    return
    
  logcount = 0

  servicefiles = os.listdir(cfgdir + '/' + servicevessel)
  for servicefile in servicefiles:
    # Count all the log files.  There is always either a .old or .new for
    # every log
    if servicefile.endswith('.old'):
      logcount = logcount + 1
    elif servicefile.endswith('.new'):
      if (servicefile[:-4] + ".old") not in servicefiles:
        # If there is a new file but no old file, we will count it
        logcount = logcount + 1

      
  if logcount >= 10:
    # If there are 10 or more logfiles already present, we don't want to create
    # another.  To deal with the possibility of a time of check / time of use
    # vulnerability, I will recheck this after I write the file, and deal with
    # it then.  For simplicity we will just return in this case.  We might do
    # something fancier here later.
    return
  else:
    logfile = logging.circular_logger(cfgdir + '/' + servicevessel + '/' + logname)
    logfile.write(str(time.time()) + ':PID-' +str(os.getpid()) + ':' +
      str(message) + '\n')
    logfile.close()
    
    # Redo the check to make sure there weren't huge amounts of logs created
    # after we checked.  If so, lets delete ourselves so we don't contribute
    # to the mess.
    logcount = 0
    
    servicefiles = os.listdir(cfgdir + '/' + servicevessel)
    for servicefile in servicefiles:
      # Count all the log files.  There is always either a .old or .new for
      # every log
      if servicefile.endswith('.old'):
        logcount = logcount + 1
      elif servicefile.endswith('.new'):
        if (servicefile[:-4] + ".old") not in servicefiles:
          # If there is a new file but no old file, we will count it
          logcount = logcount + 1
    
    if logcount >= 10:
      # Make sure we try to remove both the .old and .new files.
      try:
        # We will try our best to remove the file, but if it fails, we can't
        # do much about it.
        os.remove(cfgdir + '/' + servicevessel + '/' + logname + '.old')
      except Exception:
        pass
        
      try:
        # We will try our best to remove the file, but if it fails, we can't
        # do much about it.
        os.remove(cfgdir + '/' + servicevessel + '/' + logname + '.new')
      except Exception:
        pass


def log(message):
  """
  <Purpose>
    Logs the given text to the given log file inside the service directory. If the 
    logfile or servicevessel is not set, this will do nothing.
    
  <Argument>
    message - The message to log.
    
  <Exceptions>
    ServiceLogError if init has not been called.
    Exception if writing to the log fails somehow.
    
  <Side Effects>
    The given message is written to the circular log buffer.
    
  <Returns>
    None
  """

  if logfile == None or servicevessel == None:
    # If we don't have a current log file, lets just return
    return

  logfile.write(str(time.time()) + ':PID-' + str(os.getpid()) + 
    ':' + str(message) + '\n')
